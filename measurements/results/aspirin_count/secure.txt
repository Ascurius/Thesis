####################################################################################################
### nested-loop join
####################################################################################################

Starting cmd=numactl --membind=0 --cpunodebind=0 -- measurements/measure_secure.sh aspirin_count
Running performance test for secure query: aspirin_count
Generating test data...
Measure performance for 100 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 18736 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 18736 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 18736 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 100 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.681e-06
Stopped timer 10 at 0.00115955 (0.0104 MB, 4 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.417e-06
Stopped timer 100 at 0.0087936 (0.1308 MB, 60 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.611e-06
Stopped timer 200 at 0.00640759 (0.1308 MB, 60 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 2.183e-06
Stopped timer 300 at 9.26249 (10.1048 MB, 80248 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 4.65e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 3.103e-06
Stopped timer 600 at 2.72018 (95.7097 MB, 1848 rounds)
Stopped timer 500 at 24.4814 (156.66 MB, 176688 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 33.787 seconds 
Time10 = 0.00115955 seconds (0.0104 MB, 4 rounds)
Time100 = 0.0087936 seconds (0.1308 MB, 60 rounds)
Time200 = 0.00640759 seconds (0.1308 MB, 60 rounds)
Time300 = 9.26249 seconds (10.1048 MB, 80248 rounds)
Time500 = 24.4814 seconds (156.66 MB, 176688 rounds)
Time600 = 2.72018 seconds (95.7097 MB, 1848 rounds)
Data sent = 167.037 MB in ~257060 rounds (party 0 only; use '-v' for more details)
Global data sent = 501.1 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 200 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 16562 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 16562 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 16562 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 200 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.577e-06
Stopped timer 10 at 0.00127677 (0.0208 MB, 6 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.386e-06
Stopped timer 100 at 0.016644 (0.2616 MB, 120 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.762e-06
Stopped timer 200 at 0.0113084 (0.1812 MB, 116 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.569e-06
Stopped timer 300 at 38.3331 (40.6604 MB, 321004 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 7.95e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 6.325e-06
Stopped timer 600 at 8.39342 (382.745 MB, 2600 rounds)
Stopped timer 500 at 95.2154 (626.546 MB, 701951 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 133.65 seconds 
Time10 = 0.00127677 seconds (0.0208 MB, 6 rounds)
Time100 = 0.016644 seconds (0.2616 MB, 120 rounds)
Time200 = 0.0113084 seconds (0.1812 MB, 116 rounds)
Time300 = 38.3331 seconds (40.6604 MB, 321004 rounds)
Time500 = 95.2154 seconds (626.546 MB, 701951 rounds)
Time600 = 8.39342 seconds (382.745 MB, 2600 rounds)
Data sent = 667.67 MB in ~1023197 rounds (party 0 only; use '-v' for more details)
Global data sent = 2002.99 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 300 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 12542 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 12542 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 12542 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 300 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 6.705e-06
Stopped timer 10 at 0.00189455 (0.0312 MB, 8 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.557e-06
Stopped timer 100 at 0.0201873 (0.312 MB, 176 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.966e-06
Stopped timer 200 at 0.0175441 (0.312 MB, 176 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.692e-06
Stopped timer 300 at 78.6452 (91.506 MB, 722260 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 5.645e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 3.247e-06
Stopped timer 600 at 16.0321 (861.11 MB, 3852 rounds)
Stopped timer 500 at 208.866 (1409.82 MB, 1577396 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 287.69 seconds 
Time10 = 0.00189455 seconds (0.0312 MB, 8 rounds)
Time100 = 0.0201873 seconds (0.312 MB, 176 rounds)
Time200 = 0.0175441 seconds (0.312 MB, 176 rounds)
Time300 = 78.6452 seconds (91.506 MB, 722260 rounds)
Time500 = 208.866 seconds (1409.82 MB, 1577396 rounds)
Time600 = 16.0321 seconds (861.11 MB, 3852 rounds)
Data sent = 1501.99 MB in ~2300016 rounds (party 0 only; use '-v' for more details)
Global data sent = 4505.93 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 400 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 18871 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 18871 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 18871 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 400 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.337e-06
Stopped timer 10 at 0.0943923 (0.0416 MB, 12 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 4.513e-06
Stopped timer 100 at 0.044093 (0.4428 MB, 229 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 3.922e-06
Stopped timer 200 at 0.0405059 (0.4428 MB, 229 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 6.119e-06
Stopped timer 300 at 155.911 (162.561 MB, 1284012 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 4.789e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 3.072e-06
Stopped timer 600 at 26.2689 (1530.89 MB, 5608 rounds)
Stopped timer 500 at 365.048 (2506.33 MB, 2803018 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 521.382 seconds 
Time10 = 0.0943923 seconds (0.0416 MB, 12 rounds)
Time100 = 0.044093 seconds (0.4428 MB, 229 rounds)
Time200 = 0.0405059 seconds (0.4428 MB, 229 rounds)
Time300 = 155.911 seconds (162.561 MB, 1284012 rounds)
Time500 = 365.048 seconds (2506.33 MB, 2803018 rounds)
Time600 = 26.2689 seconds (1530.89 MB, 5608 rounds)
Data sent = 2669.82 MB in ~4087500 rounds (party 0 only; use '-v' for more details)
Global data sent = 8009.42 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 500 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11488 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11488 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11488 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 500 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.225e-06
Stopped timer 10 at 0.00343631 (0.052 MB, 14 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.695e-06
Stopped timer 100 at 0.0414824 (0.5736 MB, 289 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.974e-06
Stopped timer 200 at 0.0371443 (0.4932 MB, 285 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 2.647e-06
Stopped timer 300 at 233.236 (253.987 MB, 2006268 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 7.883e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 6.193e-06
Stopped timer 600 at 36.098 (2392.07 MB, 7868 rounds)
Stopped timer 500 at 564.36 (3916.23 MB, 4378822 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 797.987 seconds 
Time10 = 0.00343631 seconds (0.052 MB, 14 rounds)
Time100 = 0.0414824 seconds (0.5736 MB, 289 rounds)
Time200 = 0.0371443 seconds (0.4932 MB, 285 rounds)
Time300 = 233.236 seconds (253.987 MB, 2006268 rounds)
Time500 = 564.36 seconds (3916.23 MB, 4378822 rounds)
Time600 = 36.098 seconds (2392.07 MB, 7868 rounds)
Data sent = 4171.34 MB in ~6385678 rounds (party 0 only; use '-v' for more details)
Global data sent = 12514 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 600 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 17969 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 17969 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 17969 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 600 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.517e-06
Stopped timer 10 at 0.00339315 (0.0624 MB, 16 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.504e-06
Stopped timer 100 at 0.0496181 (0.624 MB, 345 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 2.235e-06
Stopped timer 200 at 0.0448584 (0.624 MB, 345 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 3.361e-06
Stopped timer 300 at 349.965 (365.783 MB, 2889028 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 4.926e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 3.07e-06
Stopped timer 600 at 54.4307 (3444.51 MB, 10624 rounds)
Stopped timer 500 at 821.288 (5639.28 MB, 6304796 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 1171.78 seconds 
Time10 = 0.00339315 seconds (0.0624 MB, 16 rounds)
Time100 = 0.0496181 seconds (0.624 MB, 345 rounds)
Time200 = 0.0448584 seconds (0.624 MB, 345 rounds)
Time300 = 349.965 seconds (365.783 MB, 2889028 rounds)
Time500 = 821.288 seconds (5639.28 MB, 6304796 rounds)
Time600 = 54.4307 seconds (3444.51 MB, 10624 rounds)
Data sent = 6006.38 MB in ~9194530 rounds (party 0 only; use '-v' for more details)
Global data sent = 18019.1 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 700 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 18720 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 18720 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 18720 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 700 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.717e-06
Stopped timer 10 at 0.0048407 (0.0728 MB, 20 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.538e-06
Stopped timer 100 at 0.0472484 (0.7548 MB, 398 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.905e-06
Stopped timer 200 at 0.0554205 (0.6744 MB, 394 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.978e-06
Stopped timer 300 at 464.325 (497.949 MB, 3932292 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 4.79e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 2.97e-06
Stopped timer 600 at 77.4529 (4688.35 MB, 13884 rounds)
Stopped timer 500 at 1126.53 (7675.65 MB, 8580951 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 1591.54 seconds 
Time10 = 0.0048407 seconds (0.0728 MB, 20 rounds)
Time100 = 0.0472484 seconds (0.7548 MB, 398 rounds)
Time200 = 0.0554205 seconds (0.6744 MB, 394 rounds)
Time300 = 464.325 seconds (497.949 MB, 3932292 rounds)
Time500 = 1126.53 seconds (7675.65 MB, 8580951 rounds)
Time600 = 77.4529 seconds (4688.35 MB, 13884 rounds)
Data sent = 8175.1 MB in ~12514055 rounds (party 0 only; use '-v' for more details)
Global data sent = 24525.2 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 800 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 15365 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 15365 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 15365 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 800 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.088e-06
Stopped timer 10 at 0.00448031 (0.0832 MB, 22 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.362e-06
Stopped timer 100 at 0.0493234 (0.8856 MB, 458 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.788e-06
Stopped timer 200 at 0.0513603 (0.8052 MB, 454 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 2.192e-06
Stopped timer 300 at 612.883 (650.245 MB, 5136048 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 7.88e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 6.36e-06
Stopped timer 600 at 103.062 (6123.61 MB, 17648 rounds)
Stopped timer 500 at 1473.53 (10025.4 MB, 11207288 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 2087.25 seconds 
Time10 = 0.00448031 seconds (0.0832 MB, 22 rounds)
Time100 = 0.0493234 seconds (0.8856 MB, 458 rounds)
Time200 = 0.0513603 seconds (0.8052 MB, 454 rounds)
Time300 = 612.883 seconds (650.245 MB, 5136048 rounds)
Time500 = 1473.53 seconds (10025.4 MB, 11207288 rounds)
Time600 = 103.062 seconds (6123.61 MB, 17648 rounds)
Data sent = 10677.4 MB in ~16344270 rounds (party 0 only; use '-v' for more details)
Global data sent = 32032.2 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 900 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 18842 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 18842 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 18842 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 900 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 7.83e-06
Stopped timer 10 at 0.0374725 (0.0936 MB, 24 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.677e-06
Stopped timer 100 at 0.0920434 (0.936 MB, 514 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 3.79e-06
Stopped timer 200 at 0.0720646 (0.936 MB, 514 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 3.939e-06
Stopped timer 300 at 774.908 (822.991 MB, 6500312 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 7.162e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 8.474e-06
Stopped timer 600 at 128.355 (7750.2 MB, 21912 rounds)
Stopped timer 500 at 1856.89 (12688.5 MB, 14183800 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 2632.88 seconds 
Time10 = 0.0374725 seconds (0.0936 MB, 24 rounds)
Time100 = 0.0920434 seconds (0.936 MB, 514 rounds)
Time200 = 0.0720646 seconds (0.936 MB, 514 rounds)
Time300 = 774.908 seconds (822.991 MB, 6500312 rounds)
Time500 = 1856.89 seconds (12688.5 MB, 14183800 rounds)
Time600 = 128.355 seconds (7750.2 MB, 21912 rounds)
Data sent = 13513.4 MB in ~20685164 rounds (party 0 only; use '-v' for more details)
Global data sent = 40540.2 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 12418 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 12418 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 12418 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.057e-06
Stopped timer 10 at 0.00581763 (0.104 MB, 26 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.52e-06
Stopped timer 100 at 0.0734201 (1.0668 MB, 567 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 3.291e-06
Stopped timer 200 at 0.079517 (0.9864 MB, 563 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 5.151e-06
Stopped timer 300 at 968.65 (1016.11 MB, 8025080 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.027e-05
Starting timer 600 at 0 (0 MB, 0 rounds) after 7.484e-06
Stopped timer 600 at 157.137 (9568.11 MB, 26676 rounds)
Stopped timer 500 at 2302.51 (15664.7 MB, 17510488 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 3272.4 seconds 
Time10 = 0.00581763 seconds (0.104 MB, 26 rounds)
Time100 = 0.0734201 seconds (1.0668 MB, 567 rounds)
Time200 = 0.079517 seconds (0.9864 MB, 563 rounds)
Time300 = 968.65 seconds (1016.11 MB, 8025080 rounds)
Time500 = 2302.51 seconds (15664.7 MB, 17510488 rounds)
Time600 = 157.137 seconds (9568.11 MB, 26676 rounds)
Data sent = 16682.9 MB in ~25536724 rounds (party 0 only; use '-v' for more details)
Global data sent = 50048.7 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1100 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11367 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11367 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11367 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1100 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 6.738e-06
Stopped timer 10 at 0.039812 (0.1144 MB, 30 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.612e-06
Stopped timer 100 at 0.0779088 (1.1172 MB, 623 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 2.762e-06
Stopped timer 200 at 0.0866931 (1.1172 MB, 623 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 7.642e-06
Stopped timer 300 at 1157.64 (1229.51 MB, 9710348 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 7.972e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 6.319e-06
Stopped timer 600 at 195.82 (11577.4 MB, 31940 rounds)
Stopped timer 500 at 2768.49 (18954.3 MB, 21187355 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 3927.61 seconds 
Time10 = 0.039812 seconds (0.1144 MB, 30 rounds)
Time100 = 0.0779088 seconds (1.1172 MB, 623 rounds)
Time200 = 0.0866931 seconds (1.1172 MB, 623 rounds)
Time300 = 1157.64 seconds (1229.51 MB, 9710348 rounds)
Time500 = 2768.49 seconds (18954.3 MB, 21187355 rounds)
Time600 = 195.82 seconds (11577.4 MB, 31940 rounds)
Data sent = 20186.2 MB in ~30898979 rounds (party 0 only; use '-v' for more details)
Global data sent = 60558.3 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1200 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11803 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11803 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11803 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1200 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 7.177e-06
Stopped timer 10 at 0.0185927 (0.1248 MB, 32 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.417e-06
Stopped timer 100 at 0.0740398 (1.248 MB, 683 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 2.715e-06
Stopped timer 200 at 0.0869817 (1.248 MB, 683 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 3.023e-06
Stopped timer 300 at 1387.58 (1463.13 MB, 11556112 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 5.336e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 3.27e-06
Stopped timer 600 at 222.07 (13778.1 MB, 37712 rounds)
Stopped timer 500 at 3282.85 (22557.2 MB, 25214400 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 4672 seconds 
Time10 = 0.0185927 seconds (0.1248 MB, 32 rounds)
Time100 = 0.0740398 seconds (1.248 MB, 683 rounds)
Time200 = 0.0869817 seconds (1.248 MB, 683 rounds)
Time300 = 1387.58 seconds (1463.13 MB, 11556112 rounds)
Time500 = 3282.85 seconds (22557.2 MB, 25214400 rounds)
Time600 = 222.07 seconds (13778.1 MB, 37712 rounds)
Data sent = 24023 MB in ~36771910 rounds (party 0 only; use '-v' for more details)
Global data sent = 72068.7 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1300 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10291 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10291 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10291 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1300 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.437e-06
Stopped timer 10 at 0.00624448 (0.1352 MB, 34 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.614e-06
Stopped timer 100 at 0.0821841 (1.3788 MB, 736 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 2.682e-06
Stopped timer 200 at 0.0902226 (1.2984 MB, 732 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 3.891e-06
Stopped timer 300 at 1608.23 (1717.2 MB, 13562384 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 8.069e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 6.313e-06
Stopped timer 600 at 267.469 (16170.1 MB, 43980 rounds)
Stopped timer 500 at 3871.32 (26473.4 MB, 29591622 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 5481.4 seconds 
Time10 = 0.00624448 seconds (0.1352 MB, 34 rounds)
Time100 = 0.0821841 seconds (1.3788 MB, 736 rounds)
Time200 = 0.0902226 seconds (1.2984 MB, 732 rounds)
Time300 = 1608.23 seconds (1717.2 MB, 13562384 rounds)
Time500 = 3871.32 seconds (26473.4 MB, 29591622 rounds)
Time600 = 267.469 seconds (16170.1 MB, 43980 rounds)
Data sent = 28193.4 MB in ~43155508 rounds (party 0 only; use '-v' for more details)
Global data sent = 84580 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1400 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 17931 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 17931 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 17931 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1400 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 2.2637e-05
Stopped timer 10 at 0.0426475 (0.1456 MB, 38 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.764e-06
Stopped timer 100 at 0.122371 (1.4292 MB, 792 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 4.367e-06
Stopped timer 200 at 0.138384 (1.4292 MB, 792 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 3.928e-06
Stopped timer 300 at 1868.07 (1991.56 MB, 15729156 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 5.19e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 3.034e-06
Stopped timer 600 at 307.271 (18753.5 MB, 50752 rounds)
Stopped timer 500 at 4464.2 (30702.8 MB, 34319022 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 6334.42 seconds 
Time10 = 0.0426475 seconds (0.1456 MB, 38 rounds)
Time100 = 0.122371 seconds (1.4292 MB, 792 rounds)
Time200 = 0.138384 seconds (1.4292 MB, 792 rounds)
Time300 = 1868.07 seconds (1991.56 MB, 15729156 rounds)
Time500 = 4464.2 seconds (30702.8 MB, 34319022 rounds)
Time600 = 307.271 seconds (18753.5 MB, 50752 rounds)
Data sent = 32697.4 MB in ~50049800 rounds (party 0 only; use '-v' for more details)
Global data sent = 98092 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1500 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 12635 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 12635 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 12635 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1500 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 6.21e-06
Stopped timer 10 at 0.0997137 (0.156 MB, 40 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 4.516e-06
Stopped timer 100 at 0.125696 (1.56 MB, 852 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 4.068e-06
Stopped timer 200 at 0.122505 (1.4796 MB, 848 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 3.685e-06
Stopped timer 300 at 2136.62 (2286.28 MB, 18056432 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 4.783e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 3.076e-06
Stopped timer 600 at 389.892 (21528.2 MB, 58024 rounds)
Stopped timer 500 at 5180.69 (35245.6 MB, 39396600 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 7319.78 seconds 
Time10 = 0.0997137 seconds (0.156 MB, 40 rounds)
Time100 = 0.125696 seconds (1.56 MB, 852 rounds)
Time200 = 0.122505 seconds (1.4796 MB, 848 rounds)
Time300 = 2136.62 seconds (2286.28 MB, 18056432 rounds)
Time500 = 5180.69 seconds (35245.6 MB, 39396600 rounds)
Time600 = 389.892 seconds (21528.2 MB, 58024 rounds)
Data sent = 37535.1 MB in ~57454772 rounds (party 0 only; use '-v' for more details)
Global data sent = 112605 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1600 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11026 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11026 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11026 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1600 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 2.3339e-05
Stopped timer 10 at 0.0200463 (0.1664 MB, 42 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 4.581e-06
Stopped timer 100 at 0.117135 (1.6908 MB, 912 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 4.132e-06
Stopped timer 200 at 0.133907 (1.6104 MB, 908 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 4.3e-06
Stopped timer 300 at 2454.24 (2601.22 MB, 20544204 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 4.957e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 3.151e-06
Stopped timer 600 at 436.651 (24494.3 MB, 65796 rounds)
Stopped timer 500 at 5871.82 (40101.6 MB, 44824355 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 8328.7 seconds 
Time10 = 0.0200463 seconds (0.1664 MB, 42 rounds)
Time100 = 0.117135 seconds (1.6908 MB, 912 rounds)
Time200 = 0.133907 seconds (1.6104 MB, 908 rounds)
Time300 = 2454.24 seconds (2601.22 MB, 20544204 rounds)
Time500 = 5871.82 seconds (40101.6 MB, 44824355 rounds)
Time600 = 436.651 seconds (24494.3 MB, 65796 rounds)
Data sent = 42706.3 MB in ~65370421 rounds (party 0 only; use '-v' for more details)
Global data sent = 128119 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1700 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10402 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10402 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10402 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1700 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 6.739e-06
Stopped timer 10 at 0.0160919 (0.1768 MB, 46 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.444e-06
Stopped timer 100 at 0.120505 (1.7412 MB, 961 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 3.704e-06
Stopped timer 200 at 0.134751 (1.7412 MB, 961 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 4.375e-06
Stopped timer 300 at 2706.98 (2936.53 MB, 23192480 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 4.686e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 2.877e-06
Stopped timer 600 at 485.514 (27651.8 MB, 74076 rounds)
Stopped timer 500 at 6629.4 (45271 MB, 50602292 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 9339.85 seconds 
Time10 = 0.0160919 seconds (0.1768 MB, 46 rounds)
Time100 = 0.120505 seconds (1.7412 MB, 961 rounds)
Time200 = 0.134751 seconds (1.7412 MB, 961 rounds)
Time300 = 2706.98 seconds (2936.53 MB, 23192480 rounds)
Time500 = 6629.4 seconds (45271 MB, 50602292 rounds)
Time600 = 485.514 seconds (27651.8 MB, 74076 rounds)
Data sent = 48211.2 MB in ~73796740 rounds (party 0 only; use '-v' for more details)
Global data sent = 144633 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1800 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 14636 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 14636 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 14636 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1800 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 8.162e-06
Stopped timer 10 at 0.260587 (0.1872 MB, 48 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 4.517e-06
Stopped timer 100 at 0.260154 (1.872 MB, 1021 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 4.336e-06
Stopped timer 200 at 0.142029 (1.7916 MB, 1017 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 4.54e-06
Stopped timer 300 at 3121.85 (3292.21 MB, 26001260 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 6.426e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 8.584e-06
Stopped timer 600 at 530.833 (31000.6 MB, 82852 rounds)
Stopped timer 500 at 7463.61 (50753.6 MB, 56730400 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 10589.1 seconds 
Time10 = 0.260587 seconds (0.1872 MB, 48 rounds)
Time100 = 0.260154 seconds (1.872 MB, 1021 rounds)
Time200 = 0.142029 seconds (1.7916 MB, 1017 rounds)
Time300 = 3121.85 seconds (3292.21 MB, 26001260 rounds)
Time500 = 7463.61 seconds (50753.6 MB, 56730400 rounds)
Time600 = 530.833 seconds (31000.6 MB, 82852 rounds)
Data sent = 54049.7 MB in ~82733746 rounds (party 0 only; use '-v' for more details)
Global data sent = 162149 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1900 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10353 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10353 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10353 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1900 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 8.765e-06
Stopped timer 10 at 0.135171 (0.1976 MB, 50 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 4.67e-06
Stopped timer 100 at 0.160907 (1.9224 MB, 1077 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 4.6e-06
Stopped timer 200 at 0.159129 (1.9224 MB, 1077 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 4.293e-06
Stopped timer 300 at 3388.19 (3668.17 MB, 28970540 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 4.884e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 3.112e-06
Stopped timer 600 at 811.896 (34540.8 MB, 92132 rounds)
Stopped timer 500 at 8535.36 (56549.5 MB, 63208692 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 11927.7 seconds 
Time10 = 0.135171 seconds (0.1976 MB, 50 rounds)
Time100 = 0.160907 seconds (1.9224 MB, 1077 rounds)
Time200 = 0.159129 seconds (1.9224 MB, 1077 rounds)
Time300 = 3388.19 seconds (3668.17 MB, 28970540 rounds)
Time500 = 8535.36 seconds (56549.5 MB, 63208692 rounds)
Time600 = 811.896 seconds (34540.8 MB, 92132 rounds)
Data sent = 60221.8 MB in ~92181436 rounds (party 0 only; use '-v' for more details)
Global data sent = 180665 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 2000 rows
Compiling high-level code...
Executing the program...
Done
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 15679 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 15679 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 15679 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 2000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 8.678e-06
Stopped timer 10 at 0.0520051 (0.208 MB, 52 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 2.174e-06
Stopped timer 100 at 0.179222 (2.0532 MB, 1130 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 4.305e-06
Stopped timer 200 at 0.173264 (2.0532 MB, 1130 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 4.573e-06
Stopped timer 300 at 3978.98 (4064.35 MB, 32100316 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 5.174e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 3.176e-06
Stopped timer 600 at 693.431 (38272.4 MB, 101916 rounds)
Stopped timer 500 at 9515.69 (62658.9 MB, 70037163 rounds)
The following benchmarks are including preprocessing (offline phase).
Time = 13498.1 seconds 
Time10 = 0.0520051 seconds (0.208 MB, 52 rounds)
Time100 = 0.179222 seconds (2.0532 MB, 1130 rounds)
Time200 = 0.173264 seconds (2.0532 MB, 1130 rounds)
Time300 = 3978.98 seconds (4064.35 MB, 32100316 rounds)
Time500 = 9515.69 seconds (62658.9 MB, 70037163 rounds)
Time600 = 693.431 seconds (38272.4 MB, 101916 rounds)
Data sent = 66727.5 MB in ~102139791 rounds (party 0 only; use '-v' for more details)
Global data sent = 200182 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)

####################################################################################################
### sort-merge join-nn
####################################################################################################

Starting cmd=numactl --membind=0 --cpunodebind=0 -- measurements/measure_secure.sh aspirin_count
Running performance test for secure query: aspirin_count
Generating test data...
Measure performance for 100 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 18081 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 18081 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 18081 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 100 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 3.906e-06
Stopped timer 10 at 0.000602407 (0.0104 MB, 4 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.399e-06
Stopped timer 100 at 0.00488981 (0.1308 MB, 60 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.341e-06
Stopped timer 200 at 0.00329527 (0.1308 MB, 60 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.373e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 9.69e-07
Stopped timer 1000 at 0.0936121 (1.85368 MB, 3046 rounds)
Stopped timer 300 at 0.677848 (4.88424 MB, 23640 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.47e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.022e-06
Stopped timer 600 at 0.862502 (95.7097 MB, 1848 rounds)
Stopped timer 500 at 6.63206 (146.475 MB, 193100 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.847e-06
Stopped timer 700 at 2.31818 (10.1852 MB, 80252 rounds)
34
The following benchmarks are including preprocessing (offline phase).
Time = 9.64474 seconds 
Time10 = 0.000602407 seconds (0.0104 MB, 4 rounds)
Time100 = 0.00488981 seconds (0.1308 MB, 60 rounds)
Time200 = 0.00329527 seconds (0.1308 MB, 60 rounds)
Time300 = 0.677848 seconds (4.88424 MB, 23640 rounds)
Time500 = 6.63206 seconds (146.475 MB, 193100 rounds)
Time600 = 0.862502 seconds (95.7097 MB, 1848 rounds)
Time700 = 2.31818 seconds (10.1852 MB, 80252 rounds)
Time1000 = 0.0936121 seconds (1.85368 MB, 3046 rounds)
Data sent = 161.816 MB in ~297116 rounds (party 0 only; use '-v' for more details)
Global data sent = 485.439 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 200 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 19089 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 19089 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 19089 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 200 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.521e-06
Stopped timer 10 at 0.00105599 (0.0208 MB, 6 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.299e-06
Stopped timer 100 at 0.00805642 (0.2616 MB, 120 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.472e-06
Stopped timer 200 at 0.00551516 (0.1812 MB, 116 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.664e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.126e-06
Stopped timer 1000 at 0.107013 (3.77928 MB, 3054 rounds)
Stopped timer 300 at 2.35445 (14.8051 MB, 78296 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.914e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.165e-06
Stopped timer 600 at 3.36471 (382.745 MB, 2600 rounds)
Stopped timer 500 at 26.285 (585.966 MB, 767616 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.722e-06
Stopped timer 700 at 9.55637 (40.6604 MB, 321004 rounds)
76
The following benchmarks are including preprocessing (offline phase).
Time = 38.238 seconds 
Time10 = 0.00105599 seconds (0.0208 MB, 6 rounds)
Time100 = 0.00805642 seconds (0.2616 MB, 120 rounds)
Time200 = 0.00551516 seconds (0.1812 MB, 116 rounds)
Time300 = 2.35445 seconds (14.8051 MB, 78296 rounds)
Time500 = 26.285 seconds (585.966 MB, 767616 rounds)
Time600 = 3.36471 seconds (382.745 MB, 2600 rounds)
Time700 = 9.55637 seconds (40.6604 MB, 321004 rounds)
Time1000 = 0.107013 seconds (3.77928 MB, 3054 rounds)
Data sent = 641.896 MB in ~1167158 rounds (party 0 only; use '-v' for more details)
Global data sent = 1925.67 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 300 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10162 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10162 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10162 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 300 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.157e-06
Stopped timer 10 at 0.00143481 (0.0312 MB, 8 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.179e-06
Stopped timer 100 at 0.0102267 (0.312 MB, 176 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.537e-06
Stopped timer 200 at 0.00837307 (0.312 MB, 176 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.356e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 9.64e-07
Stopped timer 1000 at 0.123024 (5.62448 MB, 3058 rounds)
Stopped timer 300 at 4.789 (29.6488 MB, 166481 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.686e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 9.63e-07
Stopped timer 600 at 7.51457 (861.11 MB, 3852 rounds)
Stopped timer 500 at 59.2029 (1318.4 MB, 1725140 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.54e-06
Stopped timer 700 at 20.6306 (91.4256 MB, 722256 rounds)
140
The following benchmarks are including preprocessing (offline phase).
Time = 84.6896 seconds 
Time10 = 0.00143481 seconds (0.0312 MB, 8 rounds)
Time100 = 0.0102267 seconds (0.312 MB, 176 rounds)
Time200 = 0.00837307 seconds (0.312 MB, 176 rounds)
Time300 = 4.789 seconds (29.6488 MB, 166481 rounds)
Time500 = 59.2029 seconds (1318.4 MB, 1725140 rounds)
Time600 = 7.51457 seconds (861.11 MB, 3852 rounds)
Time700 = 20.6306 seconds (91.4256 MB, 722256 rounds)
Time1000 = 0.123024 seconds (5.62448 MB, 3058 rounds)
Data sent = 1440.13 MB in ~2614237 rounds (party 0 only; use '-v' for more details)
Global data sent = 4320.35 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 400 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11487 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11487 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11487 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 400 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 7.558e-06
Stopped timer 10 at 0.00194856 (0.0416 MB, 12 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.051e-06
Stopped timer 100 at 0.0132218 (0.4428 MB, 229 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.413e-06
Stopped timer 200 at 0.0112859 (0.4428 MB, 229 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.359e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 9.95e-07
Stopped timer 1000 at 0.13839 (7.46968 MB, 3062 rounds)
Stopped timer 300 at 8.49351 (49.4173 MB, 289176 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.802e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.117e-06
Stopped timer 600 at 13.7653 (1530.97 MB, 5612 rounds)
Stopped timer 500 at 107.312 (2343.77 MB, 3065672 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.28e-06
Stopped timer 700 at 37.1217 (162.642 MB, 1284016 rounds)
186
The following benchmarks are including preprocessing (offline phase).
Time = 153.028 seconds 
Time10 = 0.00194856 seconds (0.0416 MB, 12 rounds)
Time100 = 0.0132218 seconds (0.4428 MB, 229 rounds)
Time200 = 0.0112859 seconds (0.4428 MB, 229 rounds)
Time300 = 8.49351 seconds (49.4173 MB, 289176 rounds)
Time500 = 107.312 seconds (2343.77 MB, 3065672 rounds)
Time600 = 13.7653 seconds (1530.97 MB, 5612 rounds)
Time700 = 37.1217 seconds (162.642 MB, 1284016 rounds)
Time1000 = 0.13839 seconds (7.46968 MB, 3062 rounds)
Data sent = 2556.76 MB in ~4639334 rounds (party 0 only; use '-v' for more details)
Global data sent = 7670.23 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 500 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11938 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11938 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11938 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 500 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.812e-06
Stopped timer 10 at 0.00224989 (0.052 MB, 14 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.229e-06
Stopped timer 100 at 0.0166216 (0.5736 MB, 289 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.476e-06
Stopped timer 200 at 0.0139732 (0.4932 MB, 285 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.936e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.364e-06
Stopped timer 1000 at 0.147217 (9.31488 MB, 3066 rounds)
Stopped timer 300 at 12.9195 (74.3397 MB, 446243 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.557e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.051e-06
Stopped timer 600 at 21.1567 (2392.07 MB, 7868 rounds)
Stopped timer 500 at 164.63 (3662.17 MB, 4789216 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.674e-06
Stopped timer 700 at 57.0332 (254.067 MB, 2006272 rounds)
232
The following benchmarks are including preprocessing (offline phase).
Time = 234.732 seconds 
Time10 = 0.00224989 seconds (0.052 MB, 14 rounds)
Time100 = 0.0166216 seconds (0.5736 MB, 289 rounds)
Time200 = 0.0139732 seconds (0.4932 MB, 285 rounds)
Time300 = 12.9195 seconds (74.3397 MB, 446243 rounds)
Time500 = 164.63 seconds (3662.17 MB, 4789216 rounds)
Time600 = 21.1567 seconds (2392.07 MB, 7868 rounds)
Time700 = 57.0332 seconds (254.067 MB, 2006272 rounds)
Time1000 = 0.147217 seconds (9.31488 MB, 3066 rounds)
Data sent = 3991.69 MB in ~7242319 rounds (party 0 only; use '-v' for more details)
Global data sent = 11975 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 600 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 14604 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 14604 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 14604 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 600 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.187e-06
Stopped timer 10 at 0.00242528 (0.0624 MB, 16 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.266e-06
Stopped timer 100 at 0.0182357 (0.624 MB, 345 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.471e-06
Stopped timer 200 at 0.0164154 (0.624 MB, 345 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.398e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.054e-06
Stopped timer 1000 at 0.170685 (11.2405 MB, 3074 rounds)
Stopped timer 300 at 18.7141 (104.194 MB, 636976 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.735e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.147e-06
Stopped timer 600 at 35.2178 (3444.51 MB, 10624 rounds)
Stopped timer 500 at 240.7 (5273.5 MB, 6895768 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.928e-06
Stopped timer 700 at 82.4202 (365.783 MB, 2889028 rounds)
282
The following benchmarks are including preprocessing (offline phase).
Time = 342.032 seconds 
Time10 = 0.00242528 seconds (0.0624 MB, 16 rounds)
Time100 = 0.0182357 seconds (0.624 MB, 345 rounds)
Time200 = 0.0164154 seconds (0.624 MB, 345 rounds)
Time300 = 18.7141 seconds (104.194 MB, 636976 rounds)
Time500 = 240.7 seconds (5273.5 MB, 6895768 rounds)
Time600 = 35.2178 seconds (3444.51 MB, 10624 rounds)
Time700 = 82.4202 seconds (365.783 MB, 2889028 rounds)
Time1000 = 0.170685 seconds (11.2405 MB, 3074 rounds)
Data sent = 5744.79 MB in ~10422478 rounds (party 0 only; use '-v' for more details)
Global data sent = 17234.3 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 700 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 19867 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 19867 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 19867 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 700 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 7.212e-06
Stopped timer 10 at 0.00288967 (0.0728 MB, 20 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.071e-06
Stopped timer 100 at 0.0215605 (0.7548 MB, 398 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.425e-06
Stopped timer 200 at 0.0188826 (0.6744 MB, 394 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.355e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 9.86e-07
Stopped timer 1000 at 0.181189 (13.0857 MB, 3078 rounds)
Stopped timer 300 at 24.8567 (139.003 MB, 861637 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.546e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.858e-06
Stopped timer 600 at 47.0964 (4688.35 MB, 13884 rounds)
Stopped timer 500 at 327.275 (7177.86 MB, 9385332 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.541e-06
Stopped timer 700 at 112.438 (497.869 MB, 3932288 rounds)
344
The following benchmarks are including preprocessing (offline phase).
Time = 464.83 seconds 
Time10 = 0.00288967 seconds (0.0728 MB, 20 rounds)
Time100 = 0.0215605 seconds (0.7548 MB, 398 rounds)
Time200 = 0.0188826 seconds (0.6744 MB, 394 rounds)
Time300 = 24.8567 seconds (139.003 MB, 861637 rounds)
Time500 = 327.275 seconds (7177.86 MB, 9385332 rounds)
Time600 = 47.0964 seconds (4688.35 MB, 13884 rounds)
Time700 = 112.438 seconds (497.869 MB, 3932288 rounds)
Time1000 = 0.181189 seconds (13.0857 MB, 3078 rounds)
Data sent = 7816.23 MB in ~14180069 rounds (party 0 only; use '-v' for more details)
Global data sent = 23448.6 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 800 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 17261 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 17261 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 17261 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 800 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.11e-06
Stopped timer 10 at 0.00312074 (0.0832 MB, 22 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.225e-06
Stopped timer 100 at 0.0241937 (0.8856 MB, 458 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.434e-06
Stopped timer 200 at 0.0212921 (0.8052 MB, 454 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.445e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.029e-06
Stopped timer 1000 at 0.203841 (14.9309 MB, 3082 rounds)
Stopped timer 300 at 32.1788 (178.861 MB, 1121301 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.66e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.016e-06
Stopped timer 600 at 66.3259 (6123.61 MB, 17648 rounds)
Stopped timer 500 at 433.7 (9375.07 MB, 12257900 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.746e-06
Stopped timer 700 at 149.181 (650.325 MB, 5136052 rounds)
390
The following benchmarks are including preprocessing (offline phase).
Time = 615.387 seconds 
Time10 = 0.00312074 seconds (0.0832 MB, 22 rounds)
Time100 = 0.0241937 seconds (0.8856 MB, 458 rounds)
Time200 = 0.0212921 seconds (0.8052 MB, 454 rounds)
Time300 = 32.1788 seconds (178.861 MB, 1121301 rounds)
Time500 = 433.7 seconds (9375.07 MB, 12257900 rounds)
Time600 = 66.3259 seconds (6123.61 MB, 17648 rounds)
Time700 = 149.181 seconds (650.325 MB, 5136052 rounds)
Time1000 = 0.203841 seconds (14.9309 MB, 3082 rounds)
Data sent = 10206 MB in ~18516187 rounds (party 0 only; use '-v' for more details)
Global data sent = 30618 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 900 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 13005 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 13005 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 13005 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 900 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 7.723e-06
Stopped timer 10 at 0.00504625 (0.0936 MB, 24 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.275e-06
Stopped timer 100 at 0.0261237 (0.936 MB, 514 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.478e-06
Stopped timer 200 at 0.0245112 (0.936 MB, 514 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.376e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.02e-06
Stopped timer 1000 at 0.220072 (16.7761 MB, 3086 rounds)
Stopped timer 300 at 40.4547 (223.597 MB, 1414017 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.754e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.062e-06
Stopped timer 600 at 82.3514 (7750.2 MB, 21912 rounds)
Stopped timer 500 at 547.314 (11865.4 MB, 15513484 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.788e-06
Stopped timer 700 at 187.001 (823.072 MB, 6500316 rounds)
448
The following benchmarks are including preprocessing (offline phase).
Time = 775.187 seconds 
Time10 = 0.00504625 seconds (0.0936 MB, 24 rounds)
Time100 = 0.0261237 seconds (0.936 MB, 514 rounds)
Time200 = 0.0245112 seconds (0.936 MB, 514 rounds)
Time300 = 40.4547 seconds (223.597 MB, 1414017 rounds)
Time500 = 547.314 seconds (11865.4 MB, 15513484 rounds)
Time600 = 82.3514 seconds (7750.2 MB, 21912 rounds)
Time700 = 187.001 seconds (823.072 MB, 6500316 rounds)
Time1000 = 0.220072 seconds (16.7761 MB, 3086 rounds)
Data sent = 12914 MB in ~23428869 rounds (party 0 only; use '-v' for more details)
Global data sent = 38742 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 12055 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 12055 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 12055 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 8.216e-06
Stopped timer 10 at 0.00543717 (0.104 MB, 26 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.293e-06
Stopped timer 100 at 0.0291778 (1.0668 MB, 567 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.336e-06
Stopped timer 200 at 0.026648 (0.9864 MB, 563 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.432e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.106e-06
Stopped timer 1000 at 0.235936 (18.7017 MB, 3094 rounds)
Stopped timer 300 at 51.0199 (273.568 MB, 1742095 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.646e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.606e-06
Stopped timer 600 at 104.395 (9568.11 MB, 26676 rounds)
Stopped timer 500 at 716.234 (14648.6 MB, 19152072 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.873e-06
Stopped timer 700 at 246.943 (1016.11 MB, 8025080 rounds)
470
The following benchmarks are including preprocessing (offline phase).
Time = 1014.82 seconds 
Time10 = 0.00543717 seconds (0.104 MB, 26 rounds)
Time100 = 0.0291778 seconds (1.0668 MB, 567 rounds)
Time200 = 0.026648 seconds (0.9864 MB, 563 rounds)
Time300 = 51.0199 seconds (273.568 MB, 1742095 rounds)
Time500 = 716.234 seconds (14648.6 MB, 19152072 rounds)
Time600 = 104.395 seconds (9568.11 MB, 26676 rounds)
Time700 = 246.943 seconds (1016.11 MB, 8025080 rounds)
Time1000 = 0.235936 seconds (18.7017 MB, 3094 rounds)
Data sent = 15940.4 MB in ~28920403 rounds (party 0 only; use '-v' for more details)
Global data sent = 47821.1 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1100 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11149 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11149 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11149 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1100 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 7.612e-06
Stopped timer 10 at 0.00785159 (0.1144 MB, 30 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.423e-06
Stopped timer 100 at 0.0533991 (1.1172 MB, 623 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.679e-06
Stopped timer 200 at 0.0306935 (1.1172 MB, 623 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 2.487e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.917e-06
Stopped timer 1000 at 0.270057 (20.5469 MB, 3098 rounds)
Stopped timer 300 at 69.289 (329.291 MB, 2109473 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.463e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.469e-06
Stopped timer 600 at 134.772 (11577.4 MB, 31940 rounds)
Stopped timer 500 at 843.831 (17724.8 MB, 23173672 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.95e-06
Stopped timer 700 at 286.702 (1229.51 MB, 9710348 rounds)
535
The following benchmarks are including preprocessing (offline phase).
Time = 1200.62 seconds 
Time10 = 0.00785159 seconds (0.1144 MB, 30 rounds)
Time100 = 0.0533991 seconds (1.1172 MB, 623 rounds)
Time200 = 0.0306935 seconds (1.1172 MB, 623 rounds)
Time300 = 69.289 seconds (329.291 MB, 2109473 rounds)
Time500 = 843.831 seconds (17724.8 MB, 23173672 rounds)
Time600 = 134.772 seconds (11577.4 MB, 31940 rounds)
Time700 = 286.702 seconds (1229.51 MB, 9710348 rounds)
Time1000 = 0.270057 seconds (20.5469 MB, 3098 rounds)
Data sent = 19285.9 MB in ~34994769 rounds (party 0 only; use '-v' for more details)
Global data sent = 57857.7 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1200 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11579 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11579 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11579 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1200 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.52e-06
Stopped timer 10 at 0.00440463 (0.1248 MB, 32 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.266e-06
Stopped timer 100 at 0.0320652 (1.248 MB, 683 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.258e-06
Stopped timer 200 at 0.0301008 (1.248 MB, 683 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.214e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 9.07e-07
Stopped timer 1000 at 0.247883 (22.3921 MB, 3102 rounds)
Stopped timer 300 at 72.9326 (387.903 MB, 2497153 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.818e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.147e-06
Stopped timer 600 at 150.431 (13778 MB, 37708 rounds)
Stopped timer 500 at 1044.19 (21094 MB, 27578284 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.923e-06
Stopped timer 700 at 358.438 (1463.13 MB, 11556112 rounds)
612
The following benchmarks are including preprocessing (offline phase).
Time = 1476.46 seconds 
Time10 = 0.00440463 seconds (0.1248 MB, 32 rounds)
Time100 = 0.0320652 seconds (1.248 MB, 683 rounds)
Time200 = 0.0301008 seconds (1.248 MB, 683 rounds)
Time300 = 72.9326 seconds (387.903 MB, 2497153 rounds)
Time500 = 1044.19 seconds (21094 MB, 27578284 rounds)
Time600 = 150.431 seconds (13778 MB, 37708 rounds)
Time700 = 358.438 seconds (1463.13 MB, 11556112 rounds)
Time1000 = 0.247883 seconds (22.3921 MB, 3102 rounds)
Data sent = 22947.6 MB in ~41632947 rounds (party 0 only; use '-v' for more details)
Global data sent = 68842.8 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1300 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10963 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10963 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10963 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1300 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 8.793e-06
Stopped timer 10 at 0.0184774 (0.1352 MB, 34 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.481e-06
Stopped timer 100 at 0.0769085 (1.3788 MB, 736 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.805e-06
Stopped timer 200 at 0.0369203 (1.2984 MB, 732 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.608e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.139e-06
Stopped timer 1000 at 0.319698 (24.2373 MB, 3106 rounds)
Stopped timer 300 at 96.568 (452.573 MB, 2926030 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.911e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.139e-06
Stopped timer 600 at 183.825 (16170.1 MB, 43980 rounds)
Stopped timer 500 at 1239.86 (24756.2 MB, 32365904 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.997e-06
Stopped timer 700 at 443.251 (1717.2 MB, 13562384 rounds)
640
The following benchmarks are including preprocessing (offline phase).
Time = 1780.77 seconds 
Time10 = 0.0184774 seconds (0.1352 MB, 34 rounds)
Time100 = 0.0769085 seconds (1.3788 MB, 736 rounds)
Time200 = 0.0369203 seconds (1.2984 MB, 732 rounds)
Time300 = 96.568 seconds (452.573 MB, 2926030 rounds)
Time500 = 1239.86 seconds (24756.2 MB, 32365904 rounds)
Time600 = 183.825 seconds (16170.1 MB, 43980 rounds)
Time700 = 443.251 seconds (1717.2 MB, 13562384 rounds)
Time1000 = 0.319698 seconds (24.2373 MB, 3106 rounds)
Data sent = 26928.7 MB in ~48855820 rounds (party 0 only; use '-v' for more details)
Global data sent = 80786.1 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1400 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 17845 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 17845 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 17845 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1400 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 7.379e-06
Stopped timer 10 at 0.00551593 (0.1456 MB, 38 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.051e-06
Stopped timer 100 at 0.0364951 (1.4292 MB, 792 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.34e-06
Stopped timer 200 at 0.0356232 (1.4292 MB, 792 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.217e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 9.22e-07
Stopped timer 1000 at 0.288485 (26.1629 MB, 3114 rounds)
Stopped timer 300 at 98.4031 (522.944 MB, 3393668 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.938e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.186e-06
Stopped timer 600 at 201.695 (18753.5 MB, 50752 rounds)
Stopped timer 500 at 1321.25 (28711.3 MB, 37536532 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.943e-06
Stopped timer 700 at 449.645 (1991.56 MB, 15729156 rounds)
687
The following benchmarks are including preprocessing (offline phase).
Time = 1870.24 seconds 
Time10 = 0.00551593 seconds (0.1456 MB, 38 rounds)
Time100 = 0.0364951 seconds (1.4292 MB, 792 rounds)
Time200 = 0.0356232 seconds (1.4292 MB, 792 rounds)
Time300 = 98.4031 seconds (522.944 MB, 3393668 rounds)
Time500 = 1321.25 seconds (28711.3 MB, 37536532 rounds)
Time600 = 201.695 seconds (18753.5 MB, 50752 rounds)
Time700 = 449.645 seconds (1991.56 MB, 15729156 rounds)
Time1000 = 0.288485 seconds (26.1629 MB, 3114 rounds)
Data sent = 31228.8 MB in ~56660978 rounds (party 0 only; use '-v' for more details)
Global data sent = 93686.1 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1500 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 16383 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 16383 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 16383 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1500 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.923e-06
Stopped timer 10 at 0.00544232 (0.156 MB, 40 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.342e-06
Stopped timer 100 at 0.0426126 (1.56 MB, 852 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.431e-06
Stopped timer 200 at 0.0397816 (1.4796 MB, 848 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.32e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.054e-06
Stopped timer 1000 at 0.316083 (28.0081 MB, 3118 rounds)
Stopped timer 300 at 112.07 (597.22 MB, 3887750 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.861e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.242e-06
Stopped timer 600 at 257.797 (21528.2 MB, 58024 rounds)
Stopped timer 500 at 1541.13 (32959.3 MB, 43090168 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.053e-06
Stopped timer 700 at 512.787 (2286.28 MB, 18056432 rounds)
732
The following benchmarks are including preprocessing (offline phase).
Time = 2167.08 seconds 
Time10 = 0.00544232 seconds (0.156 MB, 40 rounds)
Time100 = 0.0426126 seconds (1.56 MB, 852 rounds)
Time200 = 0.0397816 seconds (1.4796 MB, 848 rounds)
Time300 = 112.07 seconds (597.22 MB, 3887750 rounds)
Time500 = 1541.13 seconds (32959.3 MB, 43090168 rounds)
Time600 = 257.797 seconds (21528.2 MB, 58024 rounds)
Time700 = 512.787 seconds (2286.28 MB, 18056432 rounds)
Time1000 = 0.316083 seconds (28.0081 MB, 3118 rounds)
Data sent = 35846 MB in ~65036090 rounds (party 0 only; use '-v' for more details)
Global data sent = 107538 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1600 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 18888 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 18888 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 18888 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1600 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 7.926e-06
Stopped timer 10 at 0.026529 (0.1664 MB, 42 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.255e-06
Stopped timer 100 at 0.045452 (1.6908 MB, 912 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.388e-06
Stopped timer 200 at 0.0422791 (1.6104 MB, 908 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.289e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.017e-06
Stopped timer 1000 at 0.331193 (29.8533 MB, 3122 rounds)
Stopped timer 300 at 128.03 (676.998 MB, 4420213 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.998e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.199e-06
Stopped timer 600 at 291.714 (24494.3 MB, 65800 rounds)
Stopped timer 500 at 1751.3 (37500.4 MB, 49026820 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.737e-06
Stopped timer 700 at 588.779 (2601.22 MB, 20544204 rounds)
781
The following benchmarks are including preprocessing (offline phase).
Time = 2469.36 seconds 
Time10 = 0.026529 seconds (0.1664 MB, 42 rounds)
Time100 = 0.045452 seconds (1.6908 MB, 912 rounds)
Time200 = 0.0422791 seconds (1.6104 MB, 908 rounds)
Time300 = 128.03 seconds (676.998 MB, 4420213 rounds)
Time500 = 1751.3 seconds (37500.4 MB, 49026820 rounds)
Time600 = 291.714 seconds (24494.3 MB, 65800 rounds)
Time700 = 588.779 seconds (2601.22 MB, 20544204 rounds)
Time1000 = 0.331193 seconds (29.8533 MB, 3122 rounds)
Data sent = 40782.1 MB in ~73993099 rounds (party 0 only; use '-v' for more details)
Global data sent = 122346 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1700 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 16262 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 16262 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 16262 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1700 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.571e-06
Stopped timer 10 at 0.00605901 (0.1768 MB, 46 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.333e-06
Stopped timer 100 at 0.0474884 (1.7412 MB, 961 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.583e-06
Stopped timer 200 at 0.045398 (1.7412 MB, 961 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.231e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 9.79e-07
Stopped timer 1000 at 0.346264 (31.6985 MB, 3126 rounds)
Stopped timer 300 at 144.283 (761.947 MB, 4987259 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.874e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.172e-06
Stopped timer 600 at 326.682 (27651.8 MB, 74076 rounds)
Stopped timer 500 at 1973.44 (42334.5 MB, 55346476 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.814e-06
Stopped timer 700 at 662.303 (2936.53 MB, 23192480 rounds)
831
The following benchmarks are including preprocessing (offline phase).
Time = 2781.42 seconds 
Time10 = 0.00605901 seconds (0.1768 MB, 46 rounds)
Time100 = 0.0474884 seconds (1.7412 MB, 961 rounds)
Time200 = 0.045398 seconds (1.7412 MB, 961 rounds)
Time300 = 144.283 seconds (761.947 MB, 4987259 rounds)
Time500 = 1973.44 seconds (42334.5 MB, 55346476 rounds)
Time600 = 326.682 seconds (27651.8 MB, 74076 rounds)
Time700 = 662.303 seconds (2936.53 MB, 23192480 rounds)
Time1000 = 0.346264 seconds (31.6985 MB, 3126 rounds)
Data sent = 46036.6 MB in ~83528183 rounds (party 0 only; use '-v' for more details)
Global data sent = 138110 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1800 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10401 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10401 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10401 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1800 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 8.64e-06
Stopped timer 10 at 0.0273297 (0.1872 MB, 48 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.219e-06
Stopped timer 100 at 0.0497724 (1.872 MB, 1021 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.458e-06
Stopped timer 200 at 0.0473595 (1.7916 MB, 1017 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.328e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.036e-06
Stopped timer 1000 at 0.36338 (33.6241 MB, 3134 rounds)
Stopped timer 300 at 161.224 (852.459 MB, 5592440 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.504e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.176e-06
Stopped timer 600 at 365.393 (31000.6 MB, 82852 rounds)
Stopped timer 500 at 2225.31 (47461.5 MB, 62049144 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.767e-06
Stopped timer 700 at 750.63 (3292.13 MB, 26001256 rounds)
876
The following benchmarks are including preprocessing (offline phase).
Time = 3138.7 seconds 
Time10 = 0.0273297 seconds (0.1872 MB, 48 rounds)
Time100 = 0.0497724 seconds (1.872 MB, 1021 rounds)
Time200 = 0.0473595 seconds (1.7916 MB, 1017 rounds)
Time300 = 161.224 seconds (852.459 MB, 5592440 rounds)
Time500 = 2225.31 seconds (47461.5 MB, 62049144 rounds)
Time600 = 365.393 seconds (31000.6 MB, 82852 rounds)
Time700 = 750.63 seconds (3292.13 MB, 26001256 rounds)
Time1000 = 0.36338 seconds (33.6241 MB, 3134 rounds)
Data sent = 51609.9 MB in ~93644926 rounds (party 0 only; use '-v' for more details)
Global data sent = 154830 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1900 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 16022 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 16022 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 16022 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1900 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.28e-06
Stopped timer 10 at 0.00649701 (0.1976 MB, 50 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.25e-06
Stopped timer 100 at 0.0823333 (1.9224 MB, 1077 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.34e-06
Stopped timer 200 at 0.0471615 (1.9224 MB, 1077 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.347e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 9.53e-07
Stopped timer 1000 at 0.350185 (35.4693 MB, 3138 rounds)
Stopped timer 300 at 180.395 (947.134 MB, 6226143 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.818e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.103e-06
Stopped timer 600 at 397.872 (34540.8 MB, 92132 rounds)
Stopped timer 500 at 2462.65 (52881.4 MB, 69134820 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.624e-06
Stopped timer 700 at 827.744 (3668.09 MB, 28970536 rounds)
930
The following benchmarks are including preprocessing (offline phase).
Time = 3472.51 seconds 
Time10 = 0.00649701 seconds (0.1976 MB, 50 rounds)
Time100 = 0.0823333 seconds (1.9224 MB, 1077 rounds)
Time200 = 0.0471615 seconds (1.9224 MB, 1077 rounds)
Time300 = 180.395 seconds (947.134 MB, 6226143 rounds)
Time500 = 2462.65 seconds (52881.4 MB, 69134820 rounds)
Time600 = 397.872 seconds (34540.8 MB, 92132 rounds)
Time700 = 827.744 seconds (3668.09 MB, 28970536 rounds)
Time1000 = 0.350185 seconds (35.4693 MB, 3138 rounds)
Data sent = 57500.7 MB in ~104333703 rounds (party 0 only; use '-v' for more details)
Global data sent = 172502 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 2000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 13913 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 13913 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 13913 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 2000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 2.1372e-05
Stopped timer 10 at 0.00704395 (0.208 MB, 52 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.263e-06
Stopped timer 100 at 0.0553117 (2.0532 MB, 1130 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.515e-06
Stopped timer 200 at 0.0535388 (2.0532 MB, 1130 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.423e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.083e-06
Stopped timer 1000 at 0.391641 (37.3145 MB, 3142 rounds)
Stopped timer 300 at 197.896 (1044.48 MB, 6878582 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.733e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.037e-06
Stopped timer 600 at 438.926 (38272.4 MB, 101916 rounds)
Stopped timer 500 at 2729.6 (58594.4 MB, 76603508 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.67e-06
Stopped timer 700 at 916.304 (4064.35 MB, 32100316 rounds)
989
The following benchmarks are including preprocessing (offline phase).
Time = 3845.67 seconds 
Time10 = 0.00704395 seconds (0.208 MB, 52 rounds)
Time100 = 0.0553117 seconds (2.0532 MB, 1130 rounds)
Time200 = 0.0535388 seconds (2.0532 MB, 1130 rounds)
Time300 = 197.896 seconds (1044.48 MB, 6878582 rounds)
Time500 = 2729.6 seconds (58594.4 MB, 76603508 rounds)
Time600 = 438.926 seconds (38272.4 MB, 101916 rounds)
Time700 = 916.304 seconds (4064.35 MB, 32100316 rounds)
Time1000 = 0.391641 seconds (37.3145 MB, 3142 rounds)
Data sent = 63707.6 MB in ~115584718 rounds (party 0 only; use '-v' for more details)
Global data sent = 191123 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done

####################################################################################################
### sort-merge join-uu
####################################################################################################

Starting cmd=numactl --membind=0 --cpunodebind=0 -- measurements/measure_secure.sh aspirin_count
Running performance test for secure query: aspirin_count
Generating test data...
Measure performance for 100 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 19410 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 19410 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 19410 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 100 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.241e-06
Stopped timer 10 at 0.00046796 (0.0104 MB, 4 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.25e-06
Stopped timer 100 at 0.00472989 (0.130784 MB, 58 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.394e-06
Stopped timer 200 at 0.00300254 (0.130784 MB, 58 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.265e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.282e-06
Stopped timer 1000 at 0.0922012 (1.85366 MB, 3044 rounds)
Stopped timer 300 at 0.147281 (2.25923 MB, 4848 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.654e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.173e-06
Stopped timer 600 at 0.0463089 (0.991264 MB, 1598 rounds)
Stopped timer 500 at 0.10466 (1.48842 MB, 3504 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.687e-06
Stopped timer 700 at 0.022537 (0.0512 MB, 800 rounds)
27
The following benchmarks are including preprocessing (offline phase).
Time = 0.283348 seconds 
Time10 = 0.00046796 seconds (0.0104 MB, 4 rounds)
Time100 = 0.00472989 seconds (0.130784 MB, 58 rounds)
Time200 = 0.00300254 seconds (0.130784 MB, 58 rounds)
Time300 = 0.147281 seconds (2.25923 MB, 4848 rounds)
Time500 = 0.10466 seconds (1.48842 MB, 3504 rounds)
Time600 = 0.0463089 seconds (0.991264 MB, 1598 rounds)
Time700 = 0.022537 seconds (0.0512 MB, 800 rounds)
Time1000 = 0.0922012 seconds (1.85366 MB, 3044 rounds)
Data sent = 4.07082 MB in ~9272 rounds (party 0 only; use '-v' for more details)
Global data sent = 12.202 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 200 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 18964 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 18964 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 18964 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 200 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 3.59e-06
Stopped timer 10 at 0.000783494 (0.0208 MB, 6 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.27e-06
Stopped timer 100 at 0.0077395 (0.261568 MB, 116 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.602e-06
Stopped timer 200 at 0.00513719 (0.181184 MB, 114 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.401e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.365e-06
Stopped timer 1000 at 0.107458 (3.77923 MB, 3048 rounds)
Stopped timer 300 at 0.212612 (4.50998 MB, 6654 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.539e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.266e-06
Stopped timer 600 at 0.0559364 (1.97805 MB, 1600 rounds)
Stopped timer 500 at 0.169731 (2.97235 MB, 5412 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.728e-06
Stopped timer 700 at 0.0480468 (0.182784 MB, 1602 rounds)
47
The following benchmarks are including preprocessing (offline phase).
Time = 0.444755 seconds 
Time10 = 0.000783494 seconds (0.0208 MB, 6 rounds)
Time100 = 0.0077395 seconds (0.261568 MB, 116 rounds)
Time200 = 0.00513719 seconds (0.181184 MB, 114 rounds)
Time300 = 0.212612 seconds (4.50998 MB, 6654 rounds)
Time500 = 0.169731 seconds (2.97235 MB, 5412 rounds)
Time600 = 0.0559364 seconds (1.97805 MB, 1600 rounds)
Time700 = 0.0480468 seconds (0.182784 MB, 1602 rounds)
Time1000 = 0.107458 seconds (3.77923 MB, 3048 rounds)
Data sent = 8.12867 MB in ~13904 rounds (party 0 only; use '-v' for more details)
Global data sent = 24.3652 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 300 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 12405 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 12405 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 12405 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 300 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.046e-06
Stopped timer 10 at 0.00111236 (0.0312 MB, 8 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.392e-06
Stopped timer 100 at 0.0101872 (0.311968 MB, 172 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.575e-06
Stopped timer 200 at 0.00808201 (0.311968 MB, 172 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.352e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.381e-06
Stopped timer 1000 at 0.12524 (5.62442 MB, 3050 rounds)
Stopped timer 300 at 0.292328 (6.84112 MB, 8462 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.673e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.224e-06
Stopped timer 600 at 0.0646719 (2.88445 MB, 1600 rounds)
Stopped timer 500 at 0.238995 (4.3759 MB, 7318 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.625e-06
Stopped timer 700 at 0.0699909 (0.314368 MB, 2404 rounds)
69
The following benchmarks are including preprocessing (offline phase).
Time = 0.621493 seconds 
Time10 = 0.00111236 seconds (0.0312 MB, 8 rounds)
Time100 = 0.0101872 seconds (0.311968 MB, 172 rounds)
Time200 = 0.00808201 seconds (0.311968 MB, 172 rounds)
Time300 = 0.292328 seconds (6.84112 MB, 8462 rounds)
Time500 = 0.238995 seconds (4.3759 MB, 7318 rounds)
Time600 = 0.0646719 seconds (2.88445 MB, 1600 rounds)
Time700 = 0.0699909 seconds (0.314368 MB, 2404 rounds)
Time1000 = 0.12524 seconds (5.62442 MB, 3050 rounds)
Data sent = 12.1865 MB in ~18536 rounds (party 0 only; use '-v' for more details)
Global data sent = 36.5284 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 400 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 16441 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 16441 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 16441 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 400 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.08e-06
Stopped timer 10 at 0.0013667 (0.0416 MB, 12 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.459e-06
Stopped timer 100 at 0.0130018 (0.442752 MB, 223 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.486e-06
Stopped timer 200 at 0.0112652 (0.442752 MB, 223 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.528e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.323e-06
Stopped timer 1000 at 0.140022 (7.4696 MB, 3052 rounds)
Stopped timer 300 at 0.360779 (9.01149 MB, 10266 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.733e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.308e-06
Stopped timer 600 at 0.0727694 (3.87123 MB, 1602 rounds)
Stopped timer 500 at 0.308869 (5.85984 MB, 9226 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.82e-06
Stopped timer 700 at 0.096542 (0.445952 MB, 3206 rounds)
92
The following benchmarks are including preprocessing (offline phase).
Time = 0.79267 seconds 
Time10 = 0.0013667 seconds (0.0416 MB, 12 rounds)
Time100 = 0.0130018 seconds (0.442752 MB, 223 rounds)
Time200 = 0.0112652 seconds (0.442752 MB, 223 rounds)
Time300 = 0.360779 seconds (9.01149 MB, 10266 rounds)
Time500 = 0.308869 seconds (5.85984 MB, 9226 rounds)
Time600 = 0.0727694 seconds (3.87123 MB, 1602 rounds)
Time700 = 0.096542 seconds (0.445952 MB, 3206 rounds)
Time1000 = 0.140022 seconds (7.4696 MB, 3052 rounds)
Data sent = 16.2444 MB in ~23156 rounds (party 0 only; use '-v' for more details)
Global data sent = 48.6916 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 500 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 14621 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 14621 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 14621 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 500 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.574e-06
Stopped timer 10 at 0.00176018 (0.052 MB, 14 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.337e-06
Stopped timer 100 at 0.0159597 (0.573536 MB, 281 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.559e-06
Stopped timer 200 at 0.0127661 (0.493152 MB, 279 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.377e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.547e-06
Stopped timer 1000 at 0.150309 (9.31478 MB, 3054 rounds)
Stopped timer 300 at 0.415319 (11.3426 MB, 12074 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.822e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.381e-06
Stopped timer 600 at 0.0794702 (4.77763 MB, 1602 rounds)
Stopped timer 500 at 0.362843 (7.26339 MB, 11132 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.927e-06
Stopped timer 700 at 0.116266 (0.497152 MB, 4006 rounds)
116
The following benchmarks are including preprocessing (offline phase).
Time = 0.925832 seconds 
Time10 = 0.00176018 seconds (0.052 MB, 14 rounds)
Time100 = 0.0159597 seconds (0.573536 MB, 281 rounds)
Time200 = 0.0127661 seconds (0.493152 MB, 279 rounds)
Time300 = 0.415319 seconds (11.3426 MB, 12074 rounds)
Time500 = 0.362843 seconds (7.26339 MB, 11132 rounds)
Time600 = 0.0794702 seconds (4.77763 MB, 1602 rounds)
Time700 = 0.116266 seconds (0.497152 MB, 4006 rounds)
Time1000 = 0.150309 seconds (9.31478 MB, 3054 rounds)
Data sent = 20.2219 MB in ~27786 rounds (party 0 only; use '-v' for more details)
Global data sent = 60.6136 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 600 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 12493 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 12493 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 12493 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 600 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.271e-06
Stopped timer 10 at 0.00205523 (0.0624 MB, 16 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.433e-06
Stopped timer 100 at 0.0183524 (0.623936 MB, 337 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.509e-06
Stopped timer 200 at 0.0157052 (0.623936 MB, 337 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.52e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.594e-06
Stopped timer 1000 at 0.171936 (11.2404 MB, 3058 rounds)
Stopped timer 300 at 0.505911 (13.5934 MB, 13880 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.206e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.374e-06
Stopped timer 600 at 0.0874327 (5.76442 MB, 1604 rounds)
Stopped timer 500 at 0.433992 (8.82771 MB, 13042 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.889e-06
Stopped timer 700 at 0.140609 (0.548352 MB, 4806 rounds)
141
The following benchmarks are including preprocessing (offline phase).
Time = 1.11755 seconds 
Time10 = 0.00205523 seconds (0.0624 MB, 16 rounds)
Time100 = 0.0183524 seconds (0.623936 MB, 337 rounds)
Time200 = 0.0157052 seconds (0.623936 MB, 337 rounds)
Time300 = 0.505911 seconds (13.5934 MB, 13880 rounds)
Time500 = 0.433992 seconds (8.82771 MB, 13042 rounds)
Time600 = 0.0874327 seconds (5.76442 MB, 1604 rounds)
Time700 = 0.140609 seconds (0.548352 MB, 4806 rounds)
Time1000 = 0.171936 seconds (11.2404 MB, 3058 rounds)
Data sent = 24.2797 MB in ~32418 rounds (party 0 only; use '-v' for more details)
Global data sent = 72.7767 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 700 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 13102 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 13102 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 13102 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 700 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 3.333e-06
Stopped timer 10 at 0.00234728 (0.0728 MB, 20 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.231e-06
Stopped timer 100 at 0.0212213 (0.75472 MB, 388 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.579e-06
Stopped timer 200 at 0.0179248 (0.674336 MB, 386 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.342e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.61e-06
Stopped timer 1000 at 0.186776 (13.0855 MB, 3060 rounds)
Stopped timer 300 at 0.550393 (15.8441 MB, 15686 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.069e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.368e-06
Stopped timer 600 at 0.0955498 (6.7512 MB, 1606 rounds)
Stopped timer 500 at 0.491055 (10.3116 MB, 14950 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.624e-06
Stopped timer 700 at 0.159632 (0.679936 MB, 5608 rounds)
161
The following benchmarks are including preprocessing (offline phase).
Time = 1.24355 seconds 
Time10 = 0.00234728 seconds (0.0728 MB, 20 rounds)
Time100 = 0.0212213 seconds (0.75472 MB, 388 rounds)
Time200 = 0.0179248 seconds (0.674336 MB, 386 rounds)
Time300 = 0.550393 seconds (15.8441 MB, 15686 rounds)
Time500 = 0.491055 seconds (10.3116 MB, 14950 rounds)
Time600 = 0.0955498 seconds (6.7512 MB, 1606 rounds)
Time700 = 0.159632 seconds (0.679936 MB, 5608 rounds)
Time1000 = 0.186776 seconds (13.0855 MB, 3060 rounds)
Data sent = 28.3376 MB in ~37038 rounds (party 0 only; use '-v' for more details)
Global data sent = 84.9399 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 800 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 16096 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 16096 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 16096 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 800 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.634e-06
Stopped timer 10 at 0.00260562 (0.0832 MB, 22 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.197e-06
Stopped timer 100 at 0.0251146 (0.885504 MB, 446 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.573e-06
Stopped timer 200 at 0.0217346 (0.80512 MB, 444 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.497e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.895e-06
Stopped timer 1000 at 0.194184 (14.9307 MB, 3062 rounds)
Stopped timer 300 at 0.621689 (18.0949 MB, 17492 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.49e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.2e-06
Stopped timer 600 at 0.0980321 (7.6576 MB, 1606 rounds)
Stopped timer 500 at 0.551382 (11.7152 MB, 16856 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.537e-06
Stopped timer 700 at 0.1809 (0.81152 MB, 6410 rounds)
184
The following benchmarks are including preprocessing (offline phase).
Time = 1.40451 seconds 
Time10 = 0.00260562 seconds (0.0832 MB, 22 rounds)
Time100 = 0.0251146 seconds (0.885504 MB, 446 rounds)
Time200 = 0.0217346 seconds (0.80512 MB, 444 rounds)
Time300 = 0.621689 seconds (18.0949 MB, 17492 rounds)
Time500 = 0.551382 seconds (11.7152 MB, 16856 rounds)
Time600 = 0.0980321 seconds (7.6576 MB, 1606 rounds)
Time700 = 0.1809 seconds (0.81152 MB, 6410 rounds)
Time1000 = 0.194184 seconds (14.9307 MB, 3062 rounds)
Data sent = 32.3954 MB in ~41670 rounds (party 0 only; use '-v' for more details)
Global data sent = 97.1031 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 900 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10933 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10933 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10933 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 900 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.122e-06
Stopped timer 10 at 0.00289023 (0.0936 MB, 24 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.441e-06
Stopped timer 100 at 0.0265184 (0.935904 MB, 502 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.627e-06
Stopped timer 200 at 0.0237175 (0.935904 MB, 502 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.37e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.76e-06
Stopped timer 1000 at 0.217565 (16.7759 MB, 3064 rounds)
Stopped timer 300 at 0.714451 (20.3456 MB, 19298 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.73e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.331e-06
Stopped timer 600 at 0.112506 (8.64438 MB, 1608 rounds)
Stopped timer 500 at 0.636381 (13.1991 MB, 18764 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.032e-06
Stopped timer 700 at 0.211297 (0.943104 MB, 7212 rounds)
203
The following benchmarks are including preprocessing (offline phase).
Time = 1.61627 seconds 
Time10 = 0.00289023 seconds (0.0936 MB, 24 rounds)
Time100 = 0.0265184 seconds (0.935904 MB, 502 rounds)
Time200 = 0.0237175 seconds (0.935904 MB, 502 rounds)
Time300 = 0.714451 seconds (20.3456 MB, 19298 rounds)
Time500 = 0.636381 seconds (13.1991 MB, 18764 rounds)
Time600 = 0.112506 seconds (8.64438 MB, 1608 rounds)
Time700 = 0.211297 seconds (0.943104 MB, 7212 rounds)
Time1000 = 0.217565 seconds (16.7759 MB, 3064 rounds)
Data sent = 36.4533 MB in ~46302 rounds (party 0 only; use '-v' for more details)
Global data sent = 109.266 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 14452 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 14452 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 14452 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 3.198e-06
Stopped timer 10 at 0.00305956 (0.104 MB, 26 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.471e-06
Stopped timer 100 at 0.0294979 (1.06669 MB, 553 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.519e-06
Stopped timer 200 at 0.0255064 (0.986304 MB, 551 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.273e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.917e-06
Stopped timer 1000 at 0.237796 (18.7015 MB, 3068 rounds)
Stopped timer 300 at 0.775365 (22.6768 MB, 21106 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.628e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.243e-06
Stopped timer 600 at 0.11437 (9.55078 MB, 1608 rounds)
Stopped timer 500 at 0.67121 (14.6027 MB, 20670 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.643e-06
Stopped timer 700 at 0.233244 (0.994304 MB, 8012 rounds)
231
The following benchmarks are including preprocessing (offline phase).
Time = 1.73908 seconds 
Time10 = 0.00305956 seconds (0.104 MB, 26 rounds)
Time100 = 0.0294979 seconds (1.06669 MB, 553 rounds)
Time200 = 0.0255064 seconds (0.986304 MB, 551 rounds)
Time300 = 0.775365 seconds (22.6768 MB, 21106 rounds)
Time500 = 0.67121 seconds (14.6027 MB, 20670 rounds)
Time600 = 0.11437 seconds (9.55078 MB, 1608 rounds)
Time700 = 0.233244 seconds (0.994304 MB, 8012 rounds)
Time1000 = 0.237796 seconds (18.7015 MB, 3068 rounds)
Data sent = 40.4308 MB in ~50918 rounds (party 0 only; use '-v' for more details)
Global data sent = 121.188 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1100 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 14096 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 14096 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 14096 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1100 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 3.386e-06
Stopped timer 10 at 0.00338486 (0.1144 MB, 30 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.055e-06
Stopped timer 100 at 0.031728 (1.11709 MB, 609 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.383e-06
Stopped timer 200 at 0.0284383 (1.11709 MB, 609 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.146e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.062e-06
Stopped timer 1000 at 0.243279 (20.5467 MB, 3070 rounds)
Stopped timer 300 at 0.845487 (24.9275 MB, 22912 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.573e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.354e-06
Stopped timer 600 at 0.129955 (10.5376 MB, 1610 rounds)
Stopped timer 500 at 0.766856 (16.0866 MB, 22578 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.111e-06
Stopped timer 700 at 0.257094 (1.12589 MB, 8814 rounds)
251
The following benchmarks are including preprocessing (offline phase).
Time = 1.93432 seconds 
Time10 = 0.00338486 seconds (0.1144 MB, 30 rounds)
Time100 = 0.031728 seconds (1.11709 MB, 609 rounds)
Time200 = 0.0284383 seconds (1.11709 MB, 609 rounds)
Time300 = 0.845487 seconds (24.9275 MB, 22912 rounds)
Time500 = 0.766856 seconds (16.0866 MB, 22578 rounds)
Time600 = 0.129955 seconds (10.5376 MB, 1610 rounds)
Time700 = 0.257094 seconds (1.12589 MB, 8814 rounds)
Time1000 = 0.243279 seconds (20.5467 MB, 3070 rounds)
Data sent = 44.4886 MB in ~55552 rounds (party 0 only; use '-v' for more details)
Global data sent = 133.351 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1200 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 16186 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 16186 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 16186 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1200 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 3.561e-06
Stopped timer 10 at 0.00580414 (0.1248 MB, 32 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 2.08e-06
Stopped timer 100 at 0.0383112 (1.24787 MB, 667 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 2.195e-06
Stopped timer 200 at 0.0293147 (1.24787 MB, 667 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.251e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.949e-06
Stopped timer 1000 at 0.247395 (22.3918 MB, 3072 rounds)
Stopped timer 300 at 0.867195 (27.0979 MB, 24716 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.848e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.225e-06
Stopped timer 600 at 0.131127 (11.5244 MB, 1612 rounds)
Stopped timer 500 at 0.815445 (17.6509 MB, 24488 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.659e-06
Stopped timer 700 at 0.263595 (1.17709 MB, 9614 rounds)
277
The following benchmarks are including preprocessing (offline phase).
Time = 2.02096 seconds 
Time10 = 0.00580414 seconds (0.1248 MB, 32 rounds)
Time100 = 0.0383112 seconds (1.24787 MB, 667 rounds)
Time200 = 0.0293147 seconds (1.24787 MB, 667 rounds)
Time300 = 0.867195 seconds (27.0979 MB, 24716 rounds)
Time500 = 0.815445 seconds (17.6509 MB, 24488 rounds)
Time600 = 0.131127 seconds (11.5244 MB, 1612 rounds)
Time700 = 0.263595 seconds (1.17709 MB, 9614 rounds)
Time1000 = 0.247395 seconds (22.3918 MB, 3072 rounds)
Data sent = 48.5465 MB in ~60184 rounds (party 0 only; use '-v' for more details)
Global data sent = 145.515 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1300 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 18211 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 18211 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 18211 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1300 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.425e-06
Stopped timer 10 at 0.00400073 (0.1352 MB, 34 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.231e-06
Stopped timer 100 at 0.0380026 (1.37866 MB, 718 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.502e-06
Stopped timer 200 at 0.0336181 (1.29827 MB, 716 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.369e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.739e-06
Stopped timer 1000 at 0.283664 (24.237 MB, 3074 rounds)
Stopped timer 300 at 0.946927 (29.429 MB, 26524 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.061e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.257e-06
Stopped timer 600 at 0.134697 (12.4308 MB, 1612 rounds)
Stopped timer 500 at 0.854413 (19.0545 MB, 26394 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.746e-06
Stopped timer 700 at 0.286728 (1.30867 MB, 10416 rounds)
298
The following benchmarks are including preprocessing (offline phase).
Time = 2.16513 seconds 
Time10 = 0.00400073 seconds (0.1352 MB, 34 rounds)
Time100 = 0.0380026 seconds (1.37866 MB, 718 rounds)
Time200 = 0.0336181 seconds (1.29827 MB, 716 rounds)
Time300 = 0.946927 seconds (29.429 MB, 26524 rounds)
Time500 = 0.854413 seconds (19.0545 MB, 26394 rounds)
Time600 = 0.134697 seconds (12.4308 MB, 1612 rounds)
Time700 = 0.286728 seconds (1.30867 MB, 10416 rounds)
Time1000 = 0.283664 seconds (24.237 MB, 3074 rounds)
Data sent = 52.6043 MB in ~64802 rounds (party 0 only; use '-v' for more details)
Global data sent = 157.678 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1400 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 17827 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 17827 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 17827 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1400 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 3.429e-06
Stopped timer 10 at 0.00431705 (0.1456 MB, 38 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.225e-06
Stopped timer 100 at 0.0410101 (1.42906 MB, 774 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.566e-06
Stopped timer 200 at 0.036017 (1.42906 MB, 774 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.257e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.818e-06
Stopped timer 1000 at 0.299454 (26.1626 MB, 3078 rounds)
Stopped timer 300 at 1.05887 (31.6798 MB, 28330 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.01e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.349e-06
Stopped timer 600 at 0.152383 (13.4175 MB, 1614 rounds)
Stopped timer 500 at 0.940589 (20.5384 MB, 28302 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.702e-06
Stopped timer 700 at 0.3093 (1.44026 MB, 11218 rounds)
321
The following benchmarks are including preprocessing (offline phase).
Time = 2.39153 seconds 
Time10 = 0.00431705 seconds (0.1456 MB, 38 rounds)
Time100 = 0.0410101 seconds (1.42906 MB, 774 rounds)
Time200 = 0.036017 seconds (1.42906 MB, 774 rounds)
Time300 = 1.05887 seconds (31.6798 MB, 28330 rounds)
Time500 = 0.940589 seconds (20.5384 MB, 28302 rounds)
Time600 = 0.152383 seconds (13.4175 MB, 1614 rounds)
Time700 = 0.3093 seconds (1.44026 MB, 11218 rounds)
Time1000 = 0.299454 seconds (26.1626 MB, 3078 rounds)
Data sent = 56.6622 MB in ~69436 rounds (party 0 only; use '-v' for more details)
Global data sent = 169.841 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1500 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 18213 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 18213 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 18213 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1500 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.327e-06
Stopped timer 10 at 0.0047268 (0.156 MB, 40 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.5e-06
Stopped timer 100 at 0.0435122 (1.55984 MB, 832 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.55e-06
Stopped timer 200 at 0.037815 (1.47946 MB, 830 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.389e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.029e-06
Stopped timer 1000 at 0.304241 (28.0078 MB, 3080 rounds)
Stopped timer 300 at 1.11153 (34.0109 MB, 30138 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.694e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.283e-06
Stopped timer 600 at 0.158901 (14.3239 MB, 1614 rounds)
Stopped timer 500 at 1.0327 (21.942 MB, 30208 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.658e-06
Stopped timer 700 at 0.356247 (1.49146 MB, 12018 rounds)
345
The following benchmarks are including preprocessing (offline phase).
Time = 2.58822 seconds 
Time10 = 0.0047268 seconds (0.156 MB, 40 rounds)
Time100 = 0.0435122 seconds (1.55984 MB, 832 rounds)
Time200 = 0.037815 seconds (1.47946 MB, 830 rounds)
Time300 = 1.11153 seconds (34.0109 MB, 30138 rounds)
Time500 = 1.0327 seconds (21.942 MB, 30208 rounds)
Time600 = 0.158901 seconds (14.3239 MB, 1614 rounds)
Time700 = 0.356247 seconds (1.49146 MB, 12018 rounds)
Time1000 = 0.304241 seconds (28.0078 MB, 3080 rounds)
Data sent = 60.6396 MB in ~74066 rounds (party 0 only; use '-v' for more details)
Global data sent = 181.763 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1600 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11976 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11976 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11976 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1600 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 3.304e-06
Stopped timer 10 at 0.00480048 (0.1664 MB, 42 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.294e-06
Stopped timer 100 at 0.0466101 (1.69062 MB, 890 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.428e-06
Stopped timer 200 at 0.0413942 (1.61024 MB, 888 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.288e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.042e-06
Stopped timer 1000 at 0.32795 (29.853 MB, 3082 rounds)
Stopped timer 300 at 1.20405 (36.1813 MB, 31942 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.711e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.37e-06
Stopped timer 600 at 0.165545 (15.3107 MB, 1616 rounds)
Stopped timer 500 at 1.08875 (23.4259 MB, 32116 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.023e-06
Stopped timer 700 at 0.388511 (1.62304 MB, 12820 rounds)
375
The following benchmarks are including preprocessing (offline phase).
Time = 2.77559 seconds 
Time10 = 0.00480048 seconds (0.1664 MB, 42 rounds)
Time100 = 0.0466101 seconds (1.69062 MB, 890 rounds)
Time200 = 0.0413942 seconds (1.61024 MB, 888 rounds)
Time300 = 1.20405 seconds (36.1813 MB, 31942 rounds)
Time500 = 1.08875 seconds (23.4259 MB, 32116 rounds)
Time600 = 0.165545 seconds (15.3107 MB, 1616 rounds)
Time700 = 0.388511 seconds (1.62304 MB, 12820 rounds)
Time1000 = 0.32795 seconds (29.853 MB, 3082 rounds)
Data sent = 64.6975 MB in ~78698 rounds (party 0 only; use '-v' for more details)
Global data sent = 193.926 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1700 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10363 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10363 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10363 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1700 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 3.106e-06
Stopped timer 10 at 0.00807793 (0.1768 MB, 46 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.818e-06
Stopped timer 100 at 0.05575 (1.74102 MB, 939 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 2.145e-06
Stopped timer 200 at 0.0477931 (1.74102 MB, 939 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.841e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.661e-06
Stopped timer 1000 at 0.338307 (31.6981 MB, 3084 rounds)
Stopped timer 300 at 1.27809 (38.432 MB, 33748 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.725e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.252e-06
Stopped timer 600 at 0.168815 (16.2975 MB, 1618 rounds)
Stopped timer 500 at 1.16346 (24.9099 MB, 34024 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.87e-06
Stopped timer 700 at 0.383495 (1.75462 MB, 13622 rounds)
394
The following benchmarks are including preprocessing (offline phase).
Time = 2.9382 seconds 
Time10 = 0.00807793 seconds (0.1768 MB, 46 rounds)
Time100 = 0.05575 seconds (1.74102 MB, 939 rounds)
Time200 = 0.0477931 seconds (1.74102 MB, 939 rounds)
Time300 = 1.27809 seconds (38.432 MB, 33748 rounds)
Time500 = 1.16346 seconds (24.9099 MB, 34024 rounds)
Time600 = 0.168815 seconds (16.2975 MB, 1618 rounds)
Time700 = 0.383495 seconds (1.75462 MB, 13622 rounds)
Time1000 = 0.338307 seconds (31.6981 MB, 3084 rounds)
Data sent = 68.7554 MB in ~83318 rounds (party 0 only; use '-v' for more details)
Global data sent = 206.089 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1800 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 15225 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 15225 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 15225 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1800 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 3.332e-06
Stopped timer 10 at 0.00528463 (0.1872 MB, 48 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.2914e-05
Stopped timer 100 at 0.0528168 (1.87181 MB, 997 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.548e-06
Stopped timer 200 at 0.0457595 (1.79142 MB, 995 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.363e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.211e-06
Stopped timer 1000 at 0.356079 (33.6237 MB, 3088 rounds)
Stopped timer 300 at 1.33648 (40.7632 MB, 35556 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.165e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.28e-06
Stopped timer 600 at 0.182325 (17.2039 MB, 1618 rounds)
Stopped timer 500 at 1.17484 (26.3938 MB, 35932 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.58e-06
Stopped timer 700 at 0.412777 (1.80582 MB, 14422 rounds)
425
The following benchmarks are including preprocessing (offline phase).
Time = 3.0296 seconds 
Time10 = 0.00528463 seconds (0.1872 MB, 48 rounds)
Time100 = 0.0528168 seconds (1.87181 MB, 997 rounds)
Time200 = 0.0457595 seconds (1.79142 MB, 995 rounds)
Time300 = 1.33648 seconds (40.7632 MB, 35556 rounds)
Time500 = 1.17484 seconds (26.3938 MB, 35932 rounds)
Time600 = 0.182325 seconds (17.2039 MB, 1618 rounds)
Time700 = 0.412777 seconds (1.80582 MB, 14422 rounds)
Time1000 = 0.356079 seconds (33.6237 MB, 3088 rounds)
Data sent = 72.8132 MB in ~87950 rounds (party 0 only; use '-v' for more details)
Global data sent = 218.252 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1900 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 19505 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 19505 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 19505 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1900 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 3.194e-06
Stopped timer 10 at 0.00567849 (0.1976 MB, 50 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.495e-06
Stopped timer 100 at 0.0550774 (1.92221 MB, 1053 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.528e-06
Stopped timer 200 at 0.0485568 (1.92221 MB, 1053 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.297e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.086e-06
Stopped timer 1000 at 0.374928 (35.4689 MB, 3090 rounds)
Stopped timer 300 at 1.40185 (43.0139 MB, 37362 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.762e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.671e-06
Stopped timer 600 at 0.189338 (18.1907 MB, 1620 rounds)
Stopped timer 500 at 1.25738 (27.8777 MB, 37840 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.891e-06
Stopped timer 700 at 0.419444 (1.93741 MB, 15224 rounds)
450
The following benchmarks are including preprocessing (offline phase).
Time = 3.1898 seconds 
Time10 = 0.00567849 seconds (0.1976 MB, 50 rounds)
Time100 = 0.0550774 seconds (1.92221 MB, 1053 rounds)
Time200 = 0.0485568 seconds (1.92221 MB, 1053 rounds)
Time300 = 1.40185 seconds (43.0139 MB, 37362 rounds)
Time500 = 1.25738 seconds (27.8777 MB, 37840 rounds)
Time600 = 0.189338 seconds (18.1907 MB, 1620 rounds)
Time700 = 0.419444 seconds (1.93741 MB, 15224 rounds)
Time1000 = 0.374928 seconds (35.4689 MB, 3090 rounds)
Data sent = 76.8711 MB in ~92582 rounds (party 0 only; use '-v' for more details)
Global data sent = 230.416 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 2000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 12337 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 12337 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 12337 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 2000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.662e-06
Stopped timer 10 at 0.00582123 (0.208 MB, 52 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.323e-06
Stopped timer 100 at 0.0572423 (2.05299 MB, 1104 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.434e-06
Stopped timer 200 at 0.0513088 (2.05299 MB, 1104 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.32e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.044e-06
Stopped timer 1000 at 0.38184 (37.3141 MB, 3092 rounds)
Stopped timer 300 at 1.44672 (45.2647 MB, 39168 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.729e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.349e-06
Stopped timer 600 at 0.196717 (19.0971 MB, 1620 rounds)
Stopped timer 500 at 1.34702 (29.2813 MB, 39746 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.957e-06
Stopped timer 700 at 0.4769 (1.98861 MB, 16024 rounds)
483
The following benchmarks are including preprocessing (offline phase).
Time = 3.38697 seconds 
Time10 = 0.00582123 seconds (0.208 MB, 52 rounds)
Time100 = 0.0572423 seconds (2.05299 MB, 1104 rounds)
Time200 = 0.0513088 seconds (2.05299 MB, 1104 rounds)
Time300 = 1.44672 seconds (45.2647 MB, 39168 rounds)
Time500 = 1.34702 seconds (29.2813 MB, 39746 rounds)
Time600 = 0.196717 seconds (19.0971 MB, 1620 rounds)
Time700 = 0.4769 seconds (1.98861 MB, 16024 rounds)
Time1000 = 0.38184 seconds (37.3141 MB, 3092 rounds)
Data sent = 80.8485 MB in ~97198 rounds (party 0 only; use '-v' for more details)
Global data sent = 242.338 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 4000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11572 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11572 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11572 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 4000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.533e-06
Stopped timer 10 at 0.0112476 (0.416 MB, 104 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.24e-06
Stopped timer 100 at 0.113562 (4.10598 MB, 2208 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.542e-06
Stopped timer 200 at 0.102718 (4.0256 MB, 2206 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.59e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.909e-06
Stopped timer 1000 at 0.708027 (74.6197 MB, 3142 rounds)
Stopped timer 300 at 2.76716 (90.5209 MB, 75294 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.582e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.291e-06
Stopped timer 600 at 0.331709 (38.2701 MB, 1646 rounds)
Stopped timer 500 at 2.60533 (58.5581 MB, 77896 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.119e-06
Stopped timer 700 at 0.915415 (4.0576 MB, 32050 rounds)
1020
The following benchmarks are including preprocessing (offline phase).
Time = 6.5183 seconds 
Time10 = 0.0112476 seconds (0.416 MB, 104 rounds)
Time100 = 0.113562 seconds (4.10598 MB, 2208 rounds)
Time200 = 0.102718 seconds (4.0256 MB, 2206 rounds)
Time300 = 2.76716 seconds (90.5209 MB, 75294 rounds)
Time500 = 2.60533 seconds (58.5581 MB, 77896 rounds)
Time600 = 0.331709 seconds (38.2701 MB, 1646 rounds)
Time700 = 0.915415 seconds (4.0576 MB, 32050 rounds)
Time1000 = 0.708027 seconds (74.6197 MB, 3142 rounds)
Data sent = 161.684 MB in ~189758 rounds (party 0 only; use '-v' for more details)
Global data sent = 484.636 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 6000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 18031 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 18031 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 18031 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 6000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.486e-06
Stopped timer 10 at 0.0169321 (0.624 MB, 156 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.386e-06
Stopped timer 100 at 0.17101 (6.07859 MB, 3310 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.639e-06
Stopped timer 200 at 0.148238 (6.07859 MB, 3310 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.561e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.593e-06
Stopped timer 1000 at 0.996787 (111.925 MB, 3192 rounds)
Stopped timer 300 at 4.28687 (135.777 MB, 111420 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.034e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.347e-06
Stopped timer 600 at 0.553162 (57.4431 MB, 1672 rounds)
Stopped timer 500 at 4.06975 (87.9153 MB, 116048 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.072e-06
Stopped timer 700 at 1.4036 (6.04621 MB, 48074 rounds)
1532
The following benchmarks are including preprocessing (offline phase).
Time = 10.1002 seconds 
Time10 = 0.0169321 seconds (0.624 MB, 156 rounds)
Time100 = 0.17101 seconds (6.07859 MB, 3310 rounds)
Time200 = 0.148238 seconds (6.07859 MB, 3310 rounds)
Time300 = 4.28687 seconds (135.777 MB, 111420 rounds)
Time500 = 4.06975 seconds (87.9153 MB, 116048 rounds)
Time600 = 0.553162 seconds (57.4431 MB, 1672 rounds)
Time700 = 1.4036 seconds (6.04621 MB, 48074 rounds)
Time1000 = 0.996787 seconds (111.925 MB, 3192 rounds)
Data sent = 242.52 MB in ~282318 rounds (party 0 only; use '-v' for more details)
Global data sent = 726.935 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 8000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 19590 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 19590 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 19590 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 8000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.43e-06
Stopped timer 10 at 0.0219364 (0.832 MB, 208 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.128e-06
Stopped timer 100 at 0.22607 (8.13158 MB, 4414 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.519e-06
Stopped timer 200 at 0.19998 (8.0512 MB, 4412 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.516e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 3.109e-06
Stopped timer 1000 at 1.32965 (149.231 MB, 3242 rounds)
Stopped timer 300 at 5.56919 (181.033 MB, 147546 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.486e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.584e-06
Stopped timer 600 at 0.658318 (76.5357 MB, 1696 rounds)
Stopped timer 500 at 5.17789 (117.192 MB, 154198 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.89e-06
Stopped timer 700 at 1.80039 (8.1152 MB, 64100 rounds)
2017
The following benchmarks are including preprocessing (offline phase).
Time = 12.9999 seconds 
Time10 = 0.0219364 seconds (0.832 MB, 208 rounds)
Time100 = 0.22607 seconds (8.13158 MB, 4414 rounds)
Time200 = 0.19998 seconds (8.0512 MB, 4412 rounds)
Time300 = 5.56919 seconds (181.033 MB, 147546 rounds)
Time500 = 5.17789 seconds (117.192 MB, 154198 rounds)
Time600 = 0.658318 seconds (76.5357 MB, 1696 rounds)
Time700 = 1.80039 seconds (8.1152 MB, 64100 rounds)
Time1000 = 1.32965 seconds (149.231 MB, 3242 rounds)
Data sent = 323.355 MB in ~374878 rounds (party 0 only; use '-v' for more details)
Global data sent = 969.234 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 10000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 18962 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 18962 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 18962 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 10000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.71e-06
Stopped timer 10 at 0.0271644 (1.04 MB, 260 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.071e-06
Stopped timer 100 at 0.287603 (10.1042 MB, 5964 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.625e-06
Stopped timer 200 at 0.266774 (10.1042 MB, 5964 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.568e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.42e-06
Stopped timer 1000 at 1.63966 (186.536 MB, 3292 rounds)
Stopped timer 300 at 6.87605 (226.289 MB, 183672 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.095e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.147e-06
Stopped timer 600 at 0.813306 (95.7087 MB, 1722 rounds)
Stopped timer 500 at 6.40928 (146.549 MB, 192350 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.84e-06
Stopped timer 700 at 2.25039 (10.1038 MB, 80124 rounds)
2528
The following benchmarks are including preprocessing (offline phase).
Time = 16.1256 seconds 
Time10 = 0.0271644 seconds (1.04 MB, 260 rounds)
Time100 = 0.287603 seconds (10.1042 MB, 5964 rounds)
Time200 = 0.266774 seconds (10.1042 MB, 5964 rounds)
Time300 = 6.87605 seconds (226.289 MB, 183672 rounds)
Time500 = 6.40928 seconds (146.549 MB, 192350 rounds)
Time600 = 0.813306 seconds (95.7087 MB, 1722 rounds)
Time700 = 2.25039 seconds (10.1038 MB, 80124 rounds)
Time1000 = 1.63966 seconds (186.536 MB, 3292 rounds)
Data sent = 404.191 MB in ~468334 rounds (party 0 only; use '-v' for more details)
Global data sent = 1211.53 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 20000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 15801 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 15801 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 15801 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 20000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.723e-06
Stopped timer 10 at 0.0515681 (2.08 MB, 520 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.161e-06
Stopped timer 100 at 0.576992 (20.2084 MB, 11921 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 2.074e-06
Stopped timer 200 at 0.531829 (20.128 MB, 11919 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.64e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.844e-06
Stopped timer 1000 at 3.26447 (373.145 MB, 3544 rounds)
Stopped timer 300 at 13.8863 (452.651 MB, 364304 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.968e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.324e-06
Stopped timer 600 at 1.60136 (191.413 MB, 1848 rounds)
Stopped timer 500 at 12.8592 (293.014 MB, 383102 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.123e-06
Stopped timer 700 at 4.63582 (20.288 MB, 160250 rounds)
5054
The following benchmarks are including preprocessing (offline phase).
Time = 32.5556 seconds 
Time10 = 0.0515681 seconds (2.08 MB, 520 rounds)
Time100 = 0.576992 seconds (20.2084 MB, 11921 rounds)
Time200 = 0.531829 seconds (20.128 MB, 11919 rounds)
Time300 = 13.8863 seconds (452.651 MB, 364304 rounds)
Time500 = 12.8592 seconds (293.014 MB, 383102 rounds)
Time600 = 1.60136 seconds (191.413 MB, 1848 rounds)
Time700 = 4.63582 seconds (20.288 MB, 160250 rounds)
Time1000 = 3.26447 seconds (373.145 MB, 3544 rounds)
Data sent = 808.369 MB in ~932016 rounds (party 0 only; use '-v' for more details)
Global data sent = 2423.03 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 40000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 17163 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 17163 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 17163 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 40000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.912e-06
Stopped timer 10 at 0.120368 (4.16 MB, 1040 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.101e-06
Stopped timer 100 at 1.07618 (40.3364 MB, 23840 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.669e-06
Stopped timer 200 at 1.03071 (40.3364 MB, 23840 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.577e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 3.297e-06
Stopped timer 1000 at 6.31874 (746.281 MB, 4046 rounds)
Stopped timer 300 at 27.8466 (905.293 MB, 725566 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.652e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.221e-06
Stopped timer 600 at 3.20065 (382.741 MB, 2098 rounds)
Stopped timer 500 at 26.4048 (585.942 MB, 764606 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.015e-06
Stopped timer 700 at 9.50058 (40.6564 MB, 320502 rounds)
10058
The following benchmarks are including preprocessing (offline phase).
Time = 66.0027 seconds 
Time10 = 0.120368 seconds (4.16 MB, 1040 rounds)
Time100 = 1.07618 seconds (40.3364 MB, 23840 rounds)
Time200 = 1.03071 seconds (40.3364 MB, 23840 rounds)
Time300 = 27.8466 seconds (905.293 MB, 725566 rounds)
Time500 = 26.4048 seconds (585.942 MB, 764606 rounds)
Time600 = 3.20065 seconds (382.741 MB, 2098 rounds)
Time700 = 9.50058 seconds (40.6564 MB, 320502 rounds)
Time1000 = 6.31874 seconds (746.281 MB, 4046 rounds)
Data sent = 1616.72 MB in ~1859394 rounds (party 0 only; use '-v' for more details)
Global data sent = 4846.01 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 60000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 15274 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 15274 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 15274 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 60000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.413e-06
Stopped timer 10 at 0.207228 (6.24 MB, 1560 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.178e-06
Stopped timer 100 at 1.7139 (60.5448 MB, 35754 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.691e-06
Stopped timer 200 at 1.5807 (60.4644 MB, 35752 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.599e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.942e-06
Stopped timer 1000 at 9.43101 (1119.34 MB, 4546 rounds)
Stopped timer 300 at 41.8455 (1357.94 MB, 1086828 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.528e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.653e-06
Stopped timer 600 at 4.74493 (574.069 MB, 2348 rounds)
Stopped timer 500 at 38.698 (878.871 MB, 1146110 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.668e-06
Stopped timer 700 at 13.9168 (60.9444 MB, 480752 rounds)
14981
The following benchmarks are including preprocessing (offline phase).
Time = 97.9955 seconds 
Time10 = 0.207228 seconds (6.24 MB, 1560 rounds)
Time100 = 1.7139 seconds (60.5448 MB, 35754 rounds)
Time200 = 1.5807 seconds (60.4644 MB, 35752 rounds)
Time300 = 41.8455 seconds (1357.94 MB, 1086828 rounds)
Time500 = 38.698 seconds (878.871 MB, 1146110 rounds)
Time600 = 4.74493 seconds (574.069 MB, 2348 rounds)
Time700 = 13.9168 seconds (60.9444 MB, 480752 rounds)
Time1000 = 9.43101 seconds (1119.34 MB, 4546 rounds)
Data sent = 2425 MB in ~2786756 rounds (party 0 only; use '-v' for more details)
Global data sent = 7268.76 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 80000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10547 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10547 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10547 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 80000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.754e-06
Stopped timer 10 at 0.320267 (8.32 MB, 2080 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.216e-06
Stopped timer 100 at 2.18258 (80.6728 MB, 47673 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.607e-06
Stopped timer 200 at 1.99944 (80.6728 MB, 47673 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.474e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 3.469e-06
Stopped timer 1000 at 12.7446 (1492.47 MB, 5048 rounds)
Stopped timer 300 at 56.1171 (1810.58 MB, 1448090 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.879e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.394e-06
Stopped timer 600 at 6.49033 (765.397 MB, 2598 rounds)
Stopped timer 500 at 51.2324 (1171.8 MB, 1527614 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.993e-06
Stopped timer 700 at 17.7554 (81.3128 MB, 641004 rounds)
19968
The following benchmarks are including preprocessing (offline phase).
Time = 129.651 seconds 
Time10 = 0.320267 seconds (8.32 MB, 2080 rounds)
Time100 = 2.18258 seconds (80.6728 MB, 47673 rounds)
Time200 = 1.99944 seconds (80.6728 MB, 47673 rounds)
Time300 = 56.1171 seconds (1810.58 MB, 1448090 rounds)
Time500 = 51.2324 seconds (1171.8 MB, 1527614 rounds)
Time600 = 6.49033 seconds (765.397 MB, 2598 rounds)
Time700 = 17.7554 seconds (81.3128 MB, 641004 rounds)
Time1000 = 12.7446 seconds (1492.47 MB, 5048 rounds)
Data sent = 3233.36 MB in ~3714134 rounds (party 0 only; use '-v' for more details)
Global data sent = 9691.75 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 100000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11069 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11069 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11069 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 100000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.937e-06
Stopped timer 10 at 0.380367 (10.4 MB, 2600 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.221e-06
Stopped timer 100 at 2.8125 (100.801 MB, 59592 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.474e-06
Stopped timer 200 at 2.56436 (100.801 MB, 59592 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.932e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 3.089e-06
Stopped timer 1000 at 15.7344 (1865.61 MB, 5550 rounds)
Stopped timer 300 at 68.4751 (2263.22 MB, 1809352 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.354e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 2.252e-06
Stopped timer 600 at 8.01617 (956.805 MB, 2850 rounds)
Stopped timer 500 at 65.0036 (1464.81 MB, 1909120 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.744e-06
Stopped timer 700 at 22.8298 (101.601 MB, 801254 rounds)
24831
The following benchmarks are including preprocessing (offline phase).
Time = 162.12 seconds 
Time10 = 0.380367 seconds (10.4 MB, 2600 rounds)
Time100 = 2.8125 seconds (100.801 MB, 59592 rounds)
Time200 = 2.56436 seconds (100.801 MB, 59592 rounds)
Time300 = 68.4751 seconds (2263.22 MB, 1809352 rounds)
Time500 = 65.0036 seconds (1464.81 MB, 1909120 rounds)
Time600 = 8.01617 seconds (956.805 MB, 2850 rounds)
Time700 = 22.8298 seconds (101.601 MB, 801254 rounds)
Time1000 = 15.7344 seconds (1865.61 MB, 5550 rounds)
Data sent = 4041.63 MB in ~4641510 rounds (party 0 only; use '-v' for more details)
Global data sent = 12114.5 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 200000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 17085 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 17085 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 17085 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 200000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 8.533e-06
Stopped timer 10 at 0.784427 (20.8 MB, 5200 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.428e-06
Stopped timer 100 at 5.47482 (201.602 MB, 119177 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.815e-06
Stopped timer 200 at 5.20538 (201.602 MB, 119177 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.734e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.918e-06
Stopped timer 1000 at 32.6728 (3731.21 MB, 8058 rounds)
Stopped timer 300 at 137.186 (4526.43 MB, 3615662 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.974e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.457e-06
Stopped timer 600 at 16.4965 (1913.61 MB, 4104 rounds)
Stopped timer 500 at 131.278 (2929.61 MB, 3816644 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.885e-06
Stopped timer 700 at 46.5755 (203.202 MB, 1602508 rounds)
49818
The following benchmarks are including preprocessing (offline phase).
Time = 326.605 seconds 
Time10 = 0.784427 seconds (20.8 MB, 5200 rounds)
Time100 = 5.47482 seconds (201.602 MB, 119177 rounds)
Time200 = 5.20538 seconds (201.602 MB, 119177 rounds)
Time300 = 137.186 seconds (4526.43 MB, 3615662 rounds)
Time500 = 131.278 seconds (2929.61 MB, 3816644 rounds)
Time600 = 16.4965 seconds (1913.61 MB, 4104 rounds)
Time700 = 46.5755 seconds (203.202 MB, 1602508 rounds)
Time1000 = 32.6728 seconds (3731.21 MB, 8058 rounds)
Data sent = 8083.25 MB in ~9278368 rounds (party 0 only; use '-v' for more details)
Global data sent = 24228.9 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 400000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10149 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10149 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10149 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 400000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.551e-06
Stopped timer 10 at 1.65004 (41.6 MB, 10400 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.32e-06
Stopped timer 100 at 11.2962 (403.203 MB, 238354 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.903e-06
Stopped timer 200 at 10.4467 (403.203 MB, 238354 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.479e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 3.805e-06
Stopped timer 1000 at 76.4091 (7462.41 MB, 13074 rounds)
Stopped timer 300 at 289.365 (9052.85 MB, 7228282 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.977e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.21e-06
Stopped timer 600 at 39.2407 (3827.21 MB, 6612 rounds)
Stopped timer 500 at 266.62 (5859.22 MB, 7631692 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.343e-06
Stopped timer 700 at 91.7483 (406.403 MB, 3205016 rounds)
99810
The following benchmarks are including preprocessing (offline phase).
Time = 671.334 seconds 
Time10 = 1.65004 seconds (41.6 MB, 10400 rounds)
Time100 = 11.2962 seconds (403.203 MB, 238354 rounds)
Time200 = 10.4467 seconds (403.203 MB, 238354 rounds)
Time300 = 289.365 seconds (9052.85 MB, 7228282 rounds)
Time500 = 266.62 seconds (5859.22 MB, 7631692 rounds)
Time600 = 39.2407 seconds (3827.21 MB, 6612 rounds)
Time700 = 91.7483 seconds (406.403 MB, 3205016 rounds)
Time1000 = 76.4091 seconds (7462.41 MB, 13074 rounds)
Data sent = 16166.5 MB in ~18552098 rounds (party 0 only; use '-v' for more details)
Global data sent = 48457.9 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 600000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 12785 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 12785 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 12785 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 600000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.412e-06
Stopped timer 10 at 2.52614 (62.4 MB, 15600 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.247e-06
Stopped timer 100 at 16.5872 (604.805 MB, 357524 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 2.546e-06
Stopped timer 200 at 15.3002 (604.805 MB, 357524 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.747e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 4.222e-06
Stopped timer 1000 at 118.984 (11193.6 MB, 18090 rounds)
Stopped timer 300 at 438.241 (13579.3 MB, 10840902 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.992e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.255e-06
Stopped timer 600 at 60.8014 (5740.73 MB, 9118 rounds)
Stopped timer 500 at 403.677 (8788.75 MB, 11446738 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.078e-06
Stopped timer 700 at 138.898 (609.605 MB, 4807524 rounds)
149883
The following benchmarks are including preprocessing (offline phase).
Time = 1015.55 seconds 
Time10 = 2.52614 seconds (62.4 MB, 15600 rounds)
Time100 = 16.5872 seconds (604.805 MB, 357524 rounds)
Time200 = 15.3002 seconds (604.805 MB, 357524 rounds)
Time300 = 438.241 seconds (13579.3 MB, 10840902 rounds)
Time500 = 403.677 seconds (8788.75 MB, 11446738 rounds)
Time600 = 60.8014 seconds (5740.73 MB, 9118 rounds)
Time700 = 138.898 seconds (609.605 MB, 4807524 rounds)
Time1000 = 118.984 seconds (11193.6 MB, 18090 rounds)
Data sent = 24249.6 MB in ~27825812 rounds (party 0 only; use '-v' for more details)
Global data sent = 72686.5 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 800000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 12620 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 12620 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 12620 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 800000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 7.41e-06
Stopped timer 10 at 3.39442 (83.2 MB, 20800 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.201e-06
Stopped timer 100 at 22.1072 (806.406 MB, 476701 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.823e-06
Stopped timer 200 at 20.591 (806.406 MB, 476701 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.837e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 4.468e-06
Stopped timer 1000 at 155.614 (14924.8 MB, 23106 rounds)
Stopped timer 300 at 579.558 (18105.6 MB, 14453520 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.035e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.264e-06
Stopped timer 600 at 80.1669 (7654.41 MB, 11628 rounds)
Stopped timer 500 at 535.38 (11718.4 MB, 15261788 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.953e-06
Stopped timer 700 at 185.801 (812.806 MB, 6410032 rounds)
199621
The following benchmarks are including preprocessing (offline phase).
Time = 1347.24 seconds 
Time10 = 3.39442 seconds (83.2 MB, 20800 rounds)
Time100 = 22.1072 seconds (806.406 MB, 476701 rounds)
Time200 = 20.591 seconds (806.406 MB, 476701 rounds)
Time300 = 579.558 seconds (18105.6 MB, 14453520 rounds)
Time500 = 535.38 seconds (11718.4 MB, 15261788 rounds)
Time600 = 80.1669 seconds (7654.41 MB, 11628 rounds)
Time700 = 185.801 seconds (812.806 MB, 6410032 rounds)
Time1000 = 155.614 seconds (14924.8 MB, 23106 rounds)
Data sent = 32332.9 MB in ~37099542 rounds (party 0 only; use '-v' for more details)
Global data sent = 96915.4 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1000000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11230 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11230 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11230 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1000000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 7.197e-06
Stopped timer 10 at 4.27108 (104 MB, 26000 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.311e-06
Stopped timer 100 at 27.9625 (1008.01 MB, 595878 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 2.008e-06
Stopped timer 200 at 25.363 (1008.01 MB, 595878 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 2.12e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 4.342e-06
Stopped timer 1000 at 192.025 (18656 MB, 28122 rounds)
Stopped timer 300 at 724.625 (22632 MB, 18066140 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.335e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.667e-06
Stopped timer 600 at 98.3461 (9568.01 MB, 14136 rounds)
Stopped timer 500 at 672.1 (14648 MB, 19076834 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.019e-06
Stopped timer 700 at 231.262 (1016.01 MB, 8012540 rounds)
249173
The following benchmarks are including preprocessing (offline phase).
Time = 1686.11 seconds 
Time10 = 4.27108 seconds (104 MB, 26000 rounds)
Time100 = 27.9625 seconds (1008.01 MB, 595878 rounds)
Time200 = 25.363 seconds (1008.01 MB, 595878 rounds)
Time300 = 724.625 seconds (22632 MB, 18066140 rounds)
Time500 = 672.1 seconds (14648 MB, 19076834 rounds)
Time600 = 98.3461 seconds (9568.01 MB, 14136 rounds)
Time700 = 231.262 seconds (1016.01 MB, 8012540 rounds)
Time1000 = 192.025 seconds (18656 MB, 28122 rounds)
Data sent = 40416 MB in ~46373270 rounds (party 0 only; use '-v' for more details)
Global data sent = 121144 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done

####################################################################################################
### sort-merge join-un
####################################################################################################

Starting cmd=numactl --membind=0 --cpunodebind=0 -- measurements/measure_secure.sh aspirin_count
Running performance test for secure query: aspirin_count
Generating test data...
Measure performance for 100 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 12309 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 12309 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 12309 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 100 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.423e-06
Stopped timer 10 at 0.000441164 (0.0104 MB, 4 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.264e-06
Stopped timer 100 at 0.00458601 (0.130784 MB, 58 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.443e-06
Stopped timer 200 at 0.00291653 (0.130784 MB, 58 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.109e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.345e-06
Stopped timer 1000 at 0.0926914 (1.85366 MB, 3044 rounds)
Stopped timer 300 at 0.153744 (2.19152 MB, 4990 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.74e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.087e-06
Stopped timer 600 at 0.0466937 (0.91088 MB, 1596 rounds)
Stopped timer 500 at 0.106285 (1.40803 MB, 3502 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.508e-06
Stopped timer 700 at 0.0232652 (0.131584 MB, 802 rounds)
4
The following benchmarks are including preprocessing (offline phase).
Time = 0.292046 seconds 
Time10 = 0.000441164 seconds (0.0104 MB, 4 rounds)
Time100 = 0.00458601 seconds (0.130784 MB, 58 rounds)
Time200 = 0.00291653 seconds (0.130784 MB, 58 rounds)
Time300 = 0.153744 seconds (2.19152 MB, 4990 rounds)
Time500 = 0.106285 seconds (1.40803 MB, 3502 rounds)
Time600 = 0.0466937 seconds (0.91088 MB, 1596 rounds)
Time700 = 0.0232652 seconds (0.131584 MB, 802 rounds)
Time1000 = 0.0926914 seconds (1.85366 MB, 3044 rounds)
Data sent = 4.0031 MB in ~9414 rounds (party 0 only; use '-v' for more details)
Global data sent = 11.9989 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 200 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 15999 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 15999 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 15999 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 200 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 1.4919e-05
Stopped timer 10 at 0.000828254 (0.0208 MB, 6 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.21e-06
Stopped timer 100 at 0.00777445 (0.261568 MB, 116 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.493e-06
Stopped timer 200 at 0.00521673 (0.181184 MB, 114 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.267e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.236e-06
Stopped timer 1000 at 0.108479 (3.77923 MB, 3048 rounds)
Stopped timer 300 at 0.215264 (4.26509 MB, 6694 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.764e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.08e-06
Stopped timer 600 at 0.0543742 (1.97805 MB, 1600 rounds)
Stopped timer 500 at 0.16663 (2.97235 MB, 5412 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.407e-06
Stopped timer 700 at 0.043791 (0.182784 MB, 1602 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 0.440274 seconds 
Time10 = 0.000828254 seconds (0.0208 MB, 6 rounds)
Time100 = 0.00777445 seconds (0.261568 MB, 116 rounds)
Time200 = 0.00521673 seconds (0.181184 MB, 114 rounds)
Time300 = 0.215264 seconds (4.26509 MB, 6694 rounds)
Time500 = 0.16663 seconds (2.97235 MB, 5412 rounds)
Time600 = 0.0543742 seconds (1.97805 MB, 1600 rounds)
Time700 = 0.043791 seconds (0.182784 MB, 1602 rounds)
Time1000 = 0.108479 seconds (3.77923 MB, 3048 rounds)
Data sent = 7.88378 MB in ~13944 rounds (party 0 only; use '-v' for more details)
Global data sent = 23.6305 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 300 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 19986 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 19986 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 19986 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 300 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.512e-06
Stopped timer 10 at 0.00107072 (0.0312 MB, 8 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.351e-06
Stopped timer 100 at 0.0102041 (0.311968 MB, 172 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.621e-06
Stopped timer 200 at 0.00810184 (0.311968 MB, 172 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.332e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.383e-06
Stopped timer 1000 at 0.124811 (5.62442 MB, 3050 rounds)
Stopped timer 300 at 0.284957 (6.41904 MB, 8400 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.804e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.336e-06
Stopped timer 600 at 0.0638112 (2.88445 MB, 1600 rounds)
Stopped timer 500 at 0.238536 (4.3759 MB, 7318 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.572e-06
Stopped timer 700 at 0.0709069 (0.314368 MB, 2404 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 0.614545 seconds 
Time10 = 0.00107072 seconds (0.0312 MB, 8 rounds)
Time100 = 0.0102041 seconds (0.311968 MB, 172 rounds)
Time200 = 0.00810184 seconds (0.311968 MB, 172 rounds)
Time300 = 0.284957 seconds (6.41904 MB, 8400 rounds)
Time500 = 0.238536 seconds (4.3759 MB, 7318 rounds)
Time600 = 0.0638112 seconds (2.88445 MB, 1600 rounds)
Time700 = 0.0709069 seconds (0.314368 MB, 2404 rounds)
Time1000 = 0.124811 seconds (5.62442 MB, 3050 rounds)
Data sent = 11.7644 MB in ~18474 rounds (party 0 only; use '-v' for more details)
Global data sent = 35.2621 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 400 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 16036 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 16036 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 16036 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 400 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 3.605e-06
Stopped timer 10 at 0.00147066 (0.0416 MB, 12 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.306e-06
Stopped timer 100 at 0.0131288 (0.442752 MB, 223 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.855e-06
Stopped timer 200 at 0.0108089 (0.442752 MB, 223 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.373e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.702e-06
Stopped timer 1000 at 0.141349 (7.4696 MB, 3052 rounds)
Stopped timer 300 at 0.35223 (8.49261 MB, 10104 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.764e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.24e-06
Stopped timer 600 at 0.0711784 (3.79085 MB, 1600 rounds)
Stopped timer 500 at 0.311066 (5.85984 MB, 9226 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.844e-06
Stopped timer 700 at 0.0937256 (0.365568 MB, 3204 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 0.783274 seconds 
Time10 = 0.00147066 seconds (0.0416 MB, 12 rounds)
Time100 = 0.0131288 seconds (0.442752 MB, 223 rounds)
Time200 = 0.0108089 seconds (0.442752 MB, 223 rounds)
Time300 = 0.35223 seconds (8.49261 MB, 10104 rounds)
Time500 = 0.311066 seconds (5.85984 MB, 9226 rounds)
Time600 = 0.0711784 seconds (3.79085 MB, 1600 rounds)
Time700 = 0.0937256 seconds (0.365568 MB, 3204 rounds)
Time1000 = 0.141349 seconds (7.4696 MB, 3052 rounds)
Data sent = 15.6451 MB in ~22992 rounds (party 0 only; use '-v' for more details)
Global data sent = 46.8938 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 500 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 17232 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 17232 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 17232 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 500 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.455e-06
Stopped timer 10 at 0.00177207 (0.052 MB, 14 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.196e-06
Stopped timer 100 at 0.0161481 (0.573536 MB, 281 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.458e-06
Stopped timer 200 at 0.013192 (0.493152 MB, 279 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.366e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.834e-06
Stopped timer 1000 at 0.156902 (9.31478 MB, 3054 rounds)
Stopped timer 300 at 0.425266 (10.6466 MB, 11810 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.819e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.222e-06
Stopped timer 600 at 0.0793013 (4.77763 MB, 1602 rounds)
Stopped timer 500 at 0.371998 (7.26339 MB, 11132 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.512e-06
Stopped timer 700 at 0.115294 (0.577536 MB, 4008 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 0.944529 seconds 
Time10 = 0.00177207 seconds (0.052 MB, 14 rounds)
Time100 = 0.0161481 seconds (0.573536 MB, 281 rounds)
Time200 = 0.013192 seconds (0.493152 MB, 279 rounds)
Time300 = 0.425266 seconds (10.6466 MB, 11810 rounds)
Time500 = 0.371998 seconds (7.26339 MB, 11132 rounds)
Time600 = 0.0793013 seconds (4.77763 MB, 1602 rounds)
Time700 = 0.115294 seconds (0.577536 MB, 4008 rounds)
Time1000 = 0.156902 seconds (9.31478 MB, 3054 rounds)
Data sent = 19.6062 MB in ~27524 rounds (party 0 only; use '-v' for more details)
Global data sent = 58.7665 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 600 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 18889 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 18889 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 18889 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 600 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.816e-06
Stopped timer 10 at 0.00201217 (0.0624 MB, 16 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.158e-06
Stopped timer 100 at 0.0182926 (0.623936 MB, 337 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.605e-06
Stopped timer 200 at 0.0162136 (0.623936 MB, 337 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.696e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.529e-06
Stopped timer 1000 at 0.16054 (11.2404 MB, 3058 rounds)
Stopped timer 300 at 0.478539 (12.7201 MB, 13514 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.84e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.209e-06
Stopped timer 600 at 0.0812372 (5.76442 MB, 1604 rounds)
Stopped timer 500 at 0.4385 (8.82771 MB, 13042 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.654e-06
Stopped timer 700 at 0.138557 (0.628736 MB, 4808 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 1.09304 seconds 
Time10 = 0.00201217 seconds (0.0624 MB, 16 rounds)
Time100 = 0.0182926 seconds (0.623936 MB, 337 rounds)
Time200 = 0.0162136 seconds (0.623936 MB, 337 rounds)
Time300 = 0.478539 seconds (12.7201 MB, 13514 rounds)
Time500 = 0.4385 seconds (8.82771 MB, 13042 rounds)
Time600 = 0.0812372 seconds (5.76442 MB, 1604 rounds)
Time700 = 0.138557 seconds (0.628736 MB, 4808 rounds)
Time1000 = 0.16054 seconds (11.2404 MB, 3058 rounds)
Data sent = 23.4868 MB in ~32054 rounds (party 0 only; use '-v' for more details)
Global data sent = 70.3981 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 700 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10115 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10115 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10115 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 700 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.141e-06
Stopped timer 10 at 0.00235035 (0.0728 MB, 20 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.258e-06
Stopped timer 100 at 0.0212358 (0.75472 MB, 388 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.531e-06
Stopped timer 200 at 0.0177857 (0.674336 MB, 386 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.354e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.621e-06
Stopped timer 1000 at 0.184007 (13.0855 MB, 3060 rounds)
Stopped timer 300 at 0.538185 (14.8741 MB, 15220 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.836e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.137e-06
Stopped timer 600 at 0.0912368 (6.7512 MB, 1606 rounds)
Stopped timer 500 at 0.494501 (10.2313 MB, 14948 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.949e-06
Stopped timer 700 at 0.167528 (0.76032 MB, 5610 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 1.2426 seconds 
Time10 = 0.00235035 seconds (0.0728 MB, 20 rounds)
Time100 = 0.0212358 seconds (0.75472 MB, 388 rounds)
Time200 = 0.0177857 seconds (0.674336 MB, 386 rounds)
Time300 = 0.538185 seconds (14.8741 MB, 15220 rounds)
Time500 = 0.494501 seconds (10.2313 MB, 14948 rounds)
Time600 = 0.0912368 seconds (6.7512 MB, 1606 rounds)
Time700 = 0.167528 seconds (0.76032 MB, 5610 rounds)
Time1000 = 0.184007 seconds (13.0855 MB, 3060 rounds)
Data sent = 27.3675 MB in ~36572 rounds (party 0 only; use '-v' for more details)
Global data sent = 82.0298 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 800 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 19659 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 19659 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 19659 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 800 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.254e-06
Stopped timer 10 at 0.00279262 (0.0832 MB, 22 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.389e-06
Stopped timer 100 at 0.0240857 (0.885504 MB, 446 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.652e-06
Stopped timer 200 at 0.0201423 (0.80512 MB, 444 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.353e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.809e-06
Stopped timer 1000 at 0.202654 (14.9307 MB, 3062 rounds)
Stopped timer 300 at 0.615135 (16.9476 MB, 16924 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.988e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.269e-06
Stopped timer 600 at 0.103322 (7.6576 MB, 1606 rounds)
Stopped timer 500 at 0.568235 (11.7152 MB, 16856 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.74e-06
Stopped timer 700 at 0.195096 (0.81152 MB, 6410 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 1.42659 seconds 
Time10 = 0.00279262 seconds (0.0832 MB, 22 rounds)
Time100 = 0.0240857 seconds (0.885504 MB, 446 rounds)
Time200 = 0.0201423 seconds (0.80512 MB, 444 rounds)
Time300 = 0.615135 seconds (16.9476 MB, 16924 rounds)
Time500 = 0.568235 seconds (11.7152 MB, 16856 rounds)
Time600 = 0.103322 seconds (7.6576 MB, 1606 rounds)
Time700 = 0.195096 seconds (0.81152 MB, 6410 rounds)
Time1000 = 0.202654 seconds (14.9307 MB, 3062 rounds)
Data sent = 31.2482 MB in ~41102 rounds (party 0 only; use '-v' for more details)
Global data sent = 93.6614 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 900 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 19835 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 19835 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 19835 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 900 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.299e-06
Stopped timer 10 at 0.00278929 (0.0936 MB, 24 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.412e-06
Stopped timer 100 at 0.0265876 (0.935904 MB, 502 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.593e-06
Stopped timer 200 at 0.0235624 (0.935904 MB, 502 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.336e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.059e-06
Stopped timer 1000 at 0.217908 (16.7759 MB, 3064 rounds)
Stopped timer 300 at 0.673502 (19.1016 MB, 18630 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.007e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.13e-06
Stopped timer 600 at 0.102808 (8.564 MB, 1606 rounds)
Stopped timer 500 at 0.62708 (13.1991 MB, 18764 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.59e-06
Stopped timer 700 at 0.20992 (0.86272 MB, 7210 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 1.56461 seconds 
Time10 = 0.00278929 seconds (0.0936 MB, 24 rounds)
Time100 = 0.0265876 seconds (0.935904 MB, 502 rounds)
Time200 = 0.0235624 seconds (0.935904 MB, 502 rounds)
Time300 = 0.673502 seconds (19.1016 MB, 18630 rounds)
Time500 = 0.62708 seconds (13.1991 MB, 18764 rounds)
Time600 = 0.102808 seconds (8.564 MB, 1606 rounds)
Time700 = 0.20992 seconds (0.86272 MB, 7210 rounds)
Time1000 = 0.217908 seconds (16.7759 MB, 3064 rounds)
Data sent = 35.1289 MB in ~45632 rounds (party 0 only; use '-v' for more details)
Global data sent = 105.293 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 17253 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 17253 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 17253 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.76e-06
Stopped timer 10 at 0.00332238 (0.104 MB, 26 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.289e-06
Stopped timer 100 at 0.0294845 (1.06669 MB, 553 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.532e-06
Stopped timer 200 at 0.0253428 (0.986304 MB, 551 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.419e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.618e-06
Stopped timer 1000 at 0.232203 (18.7015 MB, 3068 rounds)
Stopped timer 300 at 0.742445 (21.1752 MB, 20334 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.836e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.276e-06
Stopped timer 600 at 0.117414 (9.63117 MB, 1610 rounds)
Stopped timer 500 at 0.669886 (14.6831 MB, 20672 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.11e-06
Stopped timer 700 at 0.223437 (0.994304 MB, 8012 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 1.69502 seconds 
Time10 = 0.00332238 seconds (0.104 MB, 26 rounds)
Time100 = 0.0294845 seconds (1.06669 MB, 553 rounds)
Time200 = 0.0253428 seconds (0.986304 MB, 551 rounds)
Time300 = 0.742445 seconds (21.1752 MB, 20334 rounds)
Time500 = 0.669886 seconds (14.6831 MB, 20672 rounds)
Time600 = 0.117414 seconds (9.63117 MB, 1610 rounds)
Time700 = 0.223437 seconds (0.994304 MB, 8012 rounds)
Time1000 = 0.232203 seconds (18.7015 MB, 3068 rounds)
Data sent = 39.0095 MB in ~50148 rounds (party 0 only; use '-v' for more details)
Global data sent = 116.925 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1100 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 16296 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 16296 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 16296 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1100 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.48e-06
Stopped timer 10 at 0.00355939 (0.1144 MB, 30 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.323e-06
Stopped timer 100 at 0.0319891 (1.11709 MB, 609 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.63e-06
Stopped timer 200 at 0.0280652 (1.11709 MB, 609 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.617e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.785e-06
Stopped timer 1000 at 0.250665 (20.5467 MB, 3070 rounds)
Stopped timer 300 at 0.816549 (23.3291 MB, 22040 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.795e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.331e-06
Stopped timer 600 at 0.129374 (10.5376 MB, 1610 rounds)
Stopped timer 500 at 0.768744 (16.167 MB, 22580 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.875e-06
Stopped timer 700 at 0.26321 (1.12589 MB, 8814 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 1.91335 seconds 
Time10 = 0.00355939 seconds (0.1144 MB, 30 rounds)
Time100 = 0.0319891 seconds (1.11709 MB, 609 rounds)
Time200 = 0.0280652 seconds (1.11709 MB, 609 rounds)
Time300 = 0.816549 seconds (23.3291 MB, 22040 rounds)
Time500 = 0.768744 seconds (16.167 MB, 22580 rounds)
Time600 = 0.129374 seconds (10.5376 MB, 1610 rounds)
Time700 = 0.26321 seconds (1.12589 MB, 8814 rounds)
Time1000 = 0.250665 seconds (20.5467 MB, 3070 rounds)
Data sent = 42.9706 MB in ~54682 rounds (party 0 only; use '-v' for more details)
Global data sent = 128.797 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1200 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11687 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11687 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11687 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1200 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.719e-06
Stopped timer 10 at 0.00387564 (0.1248 MB, 32 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.204e-06
Stopped timer 100 at 0.0356064 (1.24787 MB, 667 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.579e-06
Stopped timer 200 at 0.0310308 (1.24787 MB, 667 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.402e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.925e-06
Stopped timer 1000 at 0.271225 (22.3918 MB, 3072 rounds)
Stopped timer 300 at 0.84314 (25.4027 MB, 23744 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.75e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.249e-06
Stopped timer 600 at 0.126533 (11.5244 MB, 1612 rounds)
Stopped timer 500 at 0.782323 (17.5706 MB, 24486 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.86e-06
Stopped timer 700 at 0.27019 (1.25747 MB, 9616 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 1.96737 seconds 
Time10 = 0.00387564 seconds (0.1248 MB, 32 rounds)
Time100 = 0.0356064 seconds (1.24787 MB, 667 rounds)
Time200 = 0.0310308 seconds (1.24787 MB, 667 rounds)
Time300 = 0.84314 seconds (25.4027 MB, 23744 rounds)
Time500 = 0.782323 seconds (17.5706 MB, 24486 rounds)
Time600 = 0.126533 seconds (11.5244 MB, 1612 rounds)
Time700 = 0.27019 seconds (1.25747 MB, 9616 rounds)
Time1000 = 0.271225 seconds (22.3918 MB, 3072 rounds)
Data sent = 46.8513 MB in ~59212 rounds (party 0 only; use '-v' for more details)
Global data sent = 140.429 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1300 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 12222 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 12222 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 12222 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1300 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.158e-06
Stopped timer 10 at 0.0040833 (0.1352 MB, 34 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.266e-06
Stopped timer 100 at 0.0386901 (1.37866 MB, 718 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 2.057e-06
Stopped timer 200 at 0.0333519 (1.29827 MB, 716 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.354e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 3.104e-06
Stopped timer 1000 at 0.28461 (24.237 MB, 3074 rounds)
Stopped timer 300 at 0.949947 (27.5566 MB, 25450 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.881e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.344e-06
Stopped timer 600 at 0.144064 (12.4308 MB, 1612 rounds)
Stopped timer 500 at 0.884528 (19.0545 MB, 26394 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.3e-06
Stopped timer 700 at 0.29812 (1.30867 MB, 10416 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 2.21005 seconds 
Time10 = 0.0040833 seconds (0.1352 MB, 34 rounds)
Time100 = 0.0386901 seconds (1.37866 MB, 718 rounds)
Time200 = 0.0333519 seconds (1.29827 MB, 716 rounds)
Time300 = 0.949947 seconds (27.5566 MB, 25450 rounds)
Time500 = 0.884528 seconds (19.0545 MB, 26394 rounds)
Time600 = 0.144064 seconds (12.4308 MB, 1612 rounds)
Time700 = 0.29812 seconds (1.30867 MB, 10416 rounds)
Time1000 = 0.28461 seconds (24.237 MB, 3074 rounds)
Data sent = 50.7319 MB in ~63728 rounds (party 0 only; use '-v' for more details)
Global data sent = 152.061 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1400 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 16558 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 16558 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 16558 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1400 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.157e-06
Stopped timer 10 at 0.00410225 (0.1456 MB, 38 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.375e-06
Stopped timer 100 at 0.0402238 (1.42906 MB, 774 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.431e-06
Stopped timer 200 at 0.0372514 (1.42906 MB, 774 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.361e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.881e-06
Stopped timer 1000 at 0.287944 (26.1626 MB, 3078 rounds)
Stopped timer 300 at 1.02572 (29.7106 MB, 27156 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.79e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.358e-06
Stopped timer 600 at 0.150659 (13.3372 MB, 1612 rounds)
Stopped timer 500 at 0.953375 (20.458 MB, 28300 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.817e-06
Stopped timer 700 at 0.306842 (1.44026 MB, 11218 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 2.36891 seconds 
Time10 = 0.00410225 seconds (0.1456 MB, 38 rounds)
Time100 = 0.0402238 seconds (1.42906 MB, 774 rounds)
Time200 = 0.0372514 seconds (1.42906 MB, 774 rounds)
Time300 = 1.02572 seconds (29.7106 MB, 27156 rounds)
Time500 = 0.953375 seconds (20.458 MB, 28300 rounds)
Time600 = 0.150659 seconds (13.3372 MB, 1612 rounds)
Time700 = 0.306842 seconds (1.44026 MB, 11218 rounds)
Time1000 = 0.287944 seconds (26.1626 MB, 3078 rounds)
Data sent = 54.6126 MB in ~68260 rounds (party 0 only; use '-v' for more details)
Global data sent = 163.692 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1500 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 12833 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 12833 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 12833 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1500 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.215e-06
Stopped timer 10 at 0.0045294 (0.156 MB, 40 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.216e-06
Stopped timer 100 at 0.0428666 (1.55984 MB, 832 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.318e-06
Stopped timer 200 at 0.0372196 (1.47946 MB, 830 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.225e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.995e-06
Stopped timer 1000 at 0.297603 (28.0078 MB, 3080 rounds)
Stopped timer 300 at 1.05402 (31.7842 MB, 28860 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.745e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.485e-06
Stopped timer 600 at 0.160069 (14.4043 MB, 1616 rounds)
Stopped timer 500 at 1.03203 (22.0224 MB, 30210 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.856e-06
Stopped timer 700 at 0.346412 (1.49146 MB, 12018 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 2.51844 seconds 
Time10 = 0.0045294 seconds (0.156 MB, 40 rounds)
Time100 = 0.0428666 seconds (1.55984 MB, 832 rounds)
Time200 = 0.0372196 seconds (1.47946 MB, 830 rounds)
Time300 = 1.05402 seconds (31.7842 MB, 28860 rounds)
Time500 = 1.03203 seconds (22.0224 MB, 30210 rounds)
Time600 = 0.160069 seconds (14.4043 MB, 1616 rounds)
Time700 = 0.346412 seconds (1.49146 MB, 12018 rounds)
Time1000 = 0.297603 seconds (28.0078 MB, 3080 rounds)
Data sent = 58.4933 MB in ~72790 rounds (party 0 only; use '-v' for more details)
Global data sent = 175.324 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1600 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10763 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10763 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10763 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1600 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4e-06
Stopped timer 10 at 0.00472017 (0.1664 MB, 42 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.267e-06
Stopped timer 100 at 0.0480527 (1.69062 MB, 890 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.602e-06
Stopped timer 200 at 0.0417148 (1.61024 MB, 888 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.327e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.057e-06
Stopped timer 1000 at 0.333804 (29.853 MB, 3082 rounds)
Stopped timer 300 at 1.16168 (33.8577 MB, 30564 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.724e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.244e-06
Stopped timer 600 at 0.170133 (15.3107 MB, 1616 rounds)
Stopped timer 500 at 1.0972 (23.4259 MB, 32116 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.929e-06
Stopped timer 700 at 0.36097 (1.62304 MB, 12820 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 2.71606 seconds 
Time10 = 0.00472017 seconds (0.1664 MB, 42 rounds)
Time100 = 0.0480527 seconds (1.69062 MB, 890 rounds)
Time200 = 0.0417148 seconds (1.61024 MB, 888 rounds)
Time300 = 1.16168 seconds (33.8577 MB, 30564 rounds)
Time500 = 1.0972 seconds (23.4259 MB, 32116 rounds)
Time600 = 0.170133 seconds (15.3107 MB, 1616 rounds)
Time700 = 0.36097 seconds (1.62304 MB, 12820 rounds)
Time1000 = 0.333804 seconds (29.853 MB, 3082 rounds)
Data sent = 62.374 MB in ~77320 rounds (party 0 only; use '-v' for more details)
Global data sent = 186.955 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1700 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 17089 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 17089 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 17089 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1700 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.334e-06
Stopped timer 10 at 0.00503402 (0.1768 MB, 46 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.55e-06
Stopped timer 100 at 0.0489304 (1.74102 MB, 939 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.435e-06
Stopped timer 200 at 0.0433492 (1.74102 MB, 939 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.34e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.874e-06
Stopped timer 1000 at 0.344824 (31.6981 MB, 3084 rounds)
Stopped timer 300 at 1.25597 (36.0117 MB, 32270 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.739e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.254e-06
Stopped timer 600 at 0.167349 (16.2975 MB, 1618 rounds)
Stopped timer 500 at 1.17882 (24.9099 MB, 34024 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.55e-06
Stopped timer 700 at 0.391387 (1.67424 MB, 13620 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 2.92543 seconds 
Time10 = 0.00503402 seconds (0.1768 MB, 46 rounds)
Time100 = 0.0489304 seconds (1.74102 MB, 939 rounds)
Time200 = 0.0433492 seconds (1.74102 MB, 939 rounds)
Time300 = 1.25597 seconds (36.0117 MB, 32270 rounds)
Time500 = 1.17882 seconds (24.9099 MB, 34024 rounds)
Time600 = 0.167349 seconds (16.2975 MB, 1618 rounds)
Time700 = 0.391387 seconds (1.67424 MB, 13620 rounds)
Time1000 = 0.344824 seconds (31.6981 MB, 3084 rounds)
Data sent = 66.2546 MB in ~81838 rounds (party 0 only; use '-v' for more details)
Global data sent = 198.587 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1800 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10425 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10425 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10425 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1800 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.523e-06
Stopped timer 10 at 0.00536037 (0.1872 MB, 48 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.278e-06
Stopped timer 100 at 0.0537631 (1.87181 MB, 997 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.539e-06
Stopped timer 200 at 0.0472839 (1.79142 MB, 995 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.221e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.644e-06
Stopped timer 1000 at 0.35967 (33.6237 MB, 3088 rounds)
Stopped timer 300 at 1.29581 (38.1656 MB, 33976 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.606e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.275e-06
Stopped timer 600 at 0.183235 (17.2039 MB, 1618 rounds)
Stopped timer 500 at 1.22945 (26.3134 MB, 35930 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.831e-06
Stopped timer 700 at 0.414863 (1.88621 MB, 14424 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 3.0482 seconds 
Time10 = 0.00536037 seconds (0.1872 MB, 48 rounds)
Time100 = 0.0537631 seconds (1.87181 MB, 997 rounds)
Time200 = 0.0472839 seconds (1.79142 MB, 995 rounds)
Time300 = 1.29581 seconds (38.1656 MB, 33976 rounds)
Time500 = 1.22945 seconds (26.3134 MB, 35930 rounds)
Time600 = 0.183235 seconds (17.2039 MB, 1618 rounds)
Time700 = 0.414863 seconds (1.88621 MB, 14424 rounds)
Time1000 = 0.35967 seconds (33.6237 MB, 3088 rounds)
Data sent = 70.2157 MB in ~86370 rounds (party 0 only; use '-v' for more details)
Global data sent = 210.46 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1900 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 17045 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 17045 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 17045 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1900 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.416e-06
Stopped timer 10 at 0.005554 (0.1976 MB, 50 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.37e-06
Stopped timer 100 at 0.0547728 (1.92221 MB, 1053 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.527e-06
Stopped timer 200 at 0.0484772 (1.92221 MB, 1053 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.329e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.14e-06
Stopped timer 1000 at 0.367946 (35.4689 MB, 3090 rounds)
Stopped timer 300 at 1.33442 (40.2392 MB, 35680 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.302e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.558e-06
Stopped timer 600 at 0.190292 (18.1907 MB, 1620 rounds)
Stopped timer 500 at 1.28659 (27.8777 MB, 37840 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.091e-06
Stopped timer 700 at 0.425139 (1.93741 MB, 15224 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 3.15659 seconds 
Time10 = 0.005554 seconds (0.1976 MB, 50 rounds)
Time100 = 0.0547728 seconds (1.92221 MB, 1053 rounds)
Time200 = 0.0484772 seconds (1.92221 MB, 1053 rounds)
Time300 = 1.33442 seconds (40.2392 MB, 35680 rounds)
Time500 = 1.28659 seconds (27.8777 MB, 37840 rounds)
Time600 = 0.190292 seconds (18.1907 MB, 1620 rounds)
Time700 = 0.425139 seconds (1.93741 MB, 15224 rounds)
Time1000 = 0.367946 seconds (35.4689 MB, 3090 rounds)
Data sent = 74.0964 MB in ~90900 rounds (party 0 only; use '-v' for more details)
Global data sent = 222.091 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 2000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 19267 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 19267 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 19267 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 2000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.268e-06
Stopped timer 10 at 0.00583284 (0.208 MB, 52 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.273e-06
Stopped timer 100 at 0.0581586 (2.05299 MB, 1104 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.662e-06
Stopped timer 200 at 0.0510131 (2.05299 MB, 1104 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.384e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 1.884e-06
Stopped timer 1000 at 0.388378 (37.3141 MB, 3092 rounds)
Stopped timer 300 at 1.38055 (42.3128 MB, 37384 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.785e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.298e-06
Stopped timer 600 at 0.193819 (19.1775 MB, 1622 rounds)
Stopped timer 500 at 1.32393 (29.2813 MB, 39746 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.675e-06
Stopped timer 700 at 0.446093 (2.06899 MB, 16026 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 3.26748 seconds 
Time10 = 0.00583284 seconds (0.208 MB, 52 rounds)
Time100 = 0.0581586 seconds (2.05299 MB, 1104 rounds)
Time200 = 0.0510131 seconds (2.05299 MB, 1104 rounds)
Time300 = 1.38055 seconds (42.3128 MB, 37384 rounds)
Time500 = 1.32393 seconds (29.2813 MB, 39746 rounds)
Time600 = 0.193819 seconds (19.1775 MB, 1622 rounds)
Time700 = 0.446093 seconds (2.06899 MB, 16026 rounds)
Time1000 = 0.388378 seconds (37.3141 MB, 3092 rounds)
Data sent = 77.977 MB in ~95416 rounds (party 0 only; use '-v' for more details)
Global data sent = 233.723 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 4000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 14005 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 14005 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 14005 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 4000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.54e-06
Stopped timer 10 at 0.0114707 (0.416 MB, 104 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.541e-06
Stopped timer 100 at 0.113135 (4.10598 MB, 2208 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.638e-06
Stopped timer 200 at 0.101573 (4.0256 MB, 2206 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.461e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.375e-06
Stopped timer 1000 at 0.657798 (74.6197 MB, 3142 rounds)
Stopped timer 300 at 2.62222 (84.6684 MB, 71486 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.82e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.129e-06
Stopped timer 600 at 0.34067 (38.2701 MB, 1646 rounds)
Stopped timer 500 at 2.62379 (58.5581 MB, 77896 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.679e-06
Stopped timer 700 at 0.902034 (4.0576 MB, 32050 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 6.37685 seconds 
Time10 = 0.0114707 seconds (0.416 MB, 104 rounds)
Time100 = 0.113135 seconds (4.10598 MB, 2208 rounds)
Time200 = 0.101573 seconds (4.0256 MB, 2206 rounds)
Time300 = 2.62222 seconds (84.6684 MB, 71486 rounds)
Time500 = 2.62379 seconds (58.5581 MB, 77896 rounds)
Time600 = 0.34067 seconds (38.2701 MB, 1646 rounds)
Time700 = 0.902034 seconds (4.0576 MB, 32050 rounds)
Time1000 = 0.657798 seconds (74.6197 MB, 3142 rounds)
Data sent = 155.832 MB in ~185950 rounds (party 0 only; use '-v' for more details)
Global data sent = 467.079 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 6000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 13345 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 13345 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 13345 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 6000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.015e-06
Stopped timer 10 at 0.0170584 (0.624 MB, 156 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.313e-06
Stopped timer 100 at 0.169316 (6.07859 MB, 3310 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 2.083e-06
Stopped timer 200 at 0.15469 (6.07859 MB, 3310 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.375e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.388e-06
Stopped timer 1000 at 1.10905 (111.925 MB, 3192 rounds)
Stopped timer 300 at 4.06814 (126.944 MB, 105586 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.93e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.392e-06
Stopped timer 600 at 0.539932 (57.4431 MB, 1672 rounds)
Stopped timer 500 at 4.0315 (87.9153 MB, 116048 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.583e-06
Stopped timer 700 at 1.42583 (6.04621 MB, 48074 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 9.87017 seconds 
Time10 = 0.0170584 seconds (0.624 MB, 156 rounds)
Time100 = 0.169316 seconds (6.07859 MB, 3310 rounds)
Time200 = 0.15469 seconds (6.07859 MB, 3310 rounds)
Time300 = 4.06814 seconds (126.944 MB, 105586 rounds)
Time500 = 4.0315 seconds (87.9153 MB, 116048 rounds)
Time600 = 0.539932 seconds (57.4431 MB, 1672 rounds)
Time700 = 1.42583 seconds (6.04621 MB, 48074 rounds)
Time1000 = 1.10905 seconds (111.925 MB, 3192 rounds)
Data sent = 233.686 MB in ~276484 rounds (party 0 only; use '-v' for more details)
Global data sent = 700.435 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 8000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 13337 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 13337 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 13337 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 8000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.926e-06
Stopped timer 10 at 0.0215357 (0.832 MB, 208 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.131e-06
Stopped timer 100 at 0.225016 (8.13158 MB, 4414 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.62e-06
Stopped timer 200 at 0.213072 (8.0512 MB, 4412 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.435e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 3.116e-06
Stopped timer 1000 at 1.39714 (149.231 MB, 3242 rounds)
Stopped timer 300 at 5.48291 (169.219 MB, 139686 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.996e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.197e-06
Stopped timer 600 at 0.716666 (76.6161 MB, 1698 rounds)
Stopped timer 500 at 5.19946 (117.192 MB, 154198 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.852e-06
Stopped timer 700 at 1.79079 (8.19558 MB, 64102 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 12.9373 seconds 
Time10 = 0.0215357 seconds (0.832 MB, 208 rounds)
Time100 = 0.225016 seconds (8.13158 MB, 4414 rounds)
Time200 = 0.213072 seconds (8.0512 MB, 4412 rounds)
Time300 = 5.48291 seconds (169.219 MB, 139686 rounds)
Time500 = 5.19946 seconds (117.192 MB, 154198 rounds)
Time600 = 0.716666 seconds (76.6161 MB, 1698 rounds)
Time700 = 1.79079 seconds (8.19558 MB, 64102 rounds)
Time1000 = 1.39714 seconds (149.231 MB, 3242 rounds)
Data sent = 311.621 MB in ~367020 rounds (party 0 only; use '-v' for more details)
Global data sent = 934.032 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 10000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 19145 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 19145 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 19145 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 10000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.56e-06
Stopped timer 10 at 0.0267738 (1.04 MB, 260 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.296e-06
Stopped timer 100 at 0.288025 (10.1042 MB, 5964 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.566e-06
Stopped timer 200 at 0.257433 (10.1042 MB, 5964 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.302e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.644e-06
Stopped timer 1000 at 1.59654 (186.536 MB, 3292 rounds)
Stopped timer 300 at 6.5126 (211.574 MB, 173788 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.914e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.214e-06
Stopped timer 600 at 0.826491 (95.7087 MB, 1722 rounds)
Stopped timer 500 at 6.41043 (146.469 MB, 192348 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.64e-06
Stopped timer 700 at 2.312 (10.1842 MB, 80126 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 15.8156 seconds 
Time10 = 0.0267738 seconds (1.04 MB, 260 rounds)
Time100 = 0.288025 seconds (10.1042 MB, 5964 rounds)
Time200 = 0.257433 seconds (10.1042 MB, 5964 rounds)
Time300 = 6.5126 seconds (211.574 MB, 173788 rounds)
Time500 = 6.41043 seconds (146.469 MB, 192348 rounds)
Time600 = 0.826491 seconds (95.7087 MB, 1722 rounds)
Time700 = 2.312 seconds (10.1842 MB, 80126 rounds)
Time1000 = 1.59654 seconds (186.536 MB, 3292 rounds)
Data sent = 389.476 MB in ~458450 rounds (party 0 only; use '-v' for more details)
Global data sent = 1167.39 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 20000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11525 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11525 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11525 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 20000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 5.528e-06
Stopped timer 10 at 0.0517406 (2.08 MB, 520 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.037e-06
Stopped timer 100 at 0.580555 (20.2084 MB, 11921 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.961e-06
Stopped timer 200 at 0.521236 (20.128 MB, 11919 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.601e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 3.112e-06
Stopped timer 1000 at 3.27287 (373.145 MB, 3544 rounds)
Stopped timer 300 at 13.2954 (423.111 MB, 344292 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.785e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.76e-06
Stopped timer 600 at 1.65635 (191.413 MB, 1848 rounds)
Stopped timer 500 at 13.2423 (293.014 MB, 383102 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.156e-06
Stopped timer 700 at 4.65783 (20.288 MB, 160250 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 32.3613 seconds 
Time10 = 0.0517406 seconds (2.08 MB, 520 rounds)
Time100 = 0.580555 seconds (20.2084 MB, 11921 rounds)
Time200 = 0.521236 seconds (20.128 MB, 11919 rounds)
Time300 = 13.2954 seconds (423.111 MB, 344292 rounds)
Time500 = 13.2423 seconds (293.014 MB, 383102 rounds)
Time600 = 1.65635 seconds (191.413 MB, 1848 rounds)
Time700 = 4.65783 seconds (20.288 MB, 160250 rounds)
Time1000 = 3.27287 seconds (373.145 MB, 3544 rounds)
Data sent = 778.829 MB in ~912004 rounds (party 0 only; use '-v' for more details)
Global data sent = 2334.41 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 40000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 14570 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 14570 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 14570 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 40000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.649e-06
Stopped timer 10 at 0.119723 (4.16 MB, 1040 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.174e-06
Stopped timer 100 at 1.16229 (40.3364 MB, 23840 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.783e-06
Stopped timer 200 at 1.05004 (40.3364 MB, 23840 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 2.035e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.898e-06
Stopped timer 1000 at 6.31866 (746.281 MB, 4046 rounds)
Stopped timer 300 at 25.8955 (846.185 MB, 685300 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.978e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.14e-06
Stopped timer 600 at 3.17699 (382.66 MB, 2096 rounds)
Stopped timer 500 at 26.3135 (585.862 MB, 764604 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.779e-06
Stopped timer 700 at 9.39449 (40.6564 MB, 320502 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 63.9588 seconds 
Time10 = 0.119723 seconds (4.16 MB, 1040 rounds)
Time100 = 1.16229 seconds (40.3364 MB, 23840 rounds)
Time200 = 1.05004 seconds (40.3364 MB, 23840 rounds)
Time300 = 25.8955 seconds (846.185 MB, 685300 rounds)
Time500 = 26.3135 seconds (585.862 MB, 764604 rounds)
Time600 = 3.17699 seconds (382.66 MB, 2096 rounds)
Time700 = 9.39449 seconds (40.6564 MB, 320502 rounds)
Time1000 = 6.31866 seconds (746.281 MB, 4046 rounds)
Data sent = 1557.54 MB in ~1819126 rounds (party 0 only; use '-v' for more details)
Global data sent = 4668.45 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 60000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 14526 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 14526 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 14526 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 60000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.962e-06
Stopped timer 10 at 0.206236 (6.24 MB, 1560 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.23e-06
Stopped timer 100 at 1.68659 (60.5448 MB, 35754 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.599e-06
Stopped timer 200 at 1.53475 (60.4644 MB, 35752 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.689e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 4.025e-06
Stopped timer 1000 at 9.26716 (1119.34 MB, 4546 rounds)
Stopped timer 300 at 38.6473 (1269.18 MB, 1026306 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.942e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.284e-06
Stopped timer 600 at 4.70514 (574.069 MB, 2348 rounds)
Stopped timer 500 at 39.0062 (878.871 MB, 1146110 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.956e-06
Stopped timer 700 at 13.8064 (60.9444 MB, 480752 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 94.9257 seconds 
Time10 = 0.206236 seconds (6.24 MB, 1560 rounds)
Time100 = 1.68659 seconds (60.5448 MB, 35754 rounds)
Time200 = 1.53475 seconds (60.4644 MB, 35752 rounds)
Time300 = 38.6473 seconds (1269.18 MB, 1026306 rounds)
Time500 = 39.0062 seconds (878.871 MB, 1146110 rounds)
Time600 = 4.70514 seconds (574.069 MB, 2348 rounds)
Time700 = 13.8064 seconds (60.9444 MB, 480752 rounds)
Time1000 = 9.26716 seconds (1119.34 MB, 4546 rounds)
Data sent = 2336.24 MB in ~2726234 rounds (party 0 only; use '-v' for more details)
Global data sent = 7002.49 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 80000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 16387 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 16387 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 16387 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 80000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 8.428e-06
Stopped timer 10 at 0.294246 (8.32 MB, 2080 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 2.042e-06
Stopped timer 100 at 2.29273 (80.6728 MB, 47673 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.696e-06
Stopped timer 200 at 2.06956 (80.6728 MB, 47673 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.752e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.702e-06
Stopped timer 1000 at 12.8052 (1492.47 MB, 5048 rounds)
Stopped timer 300 at 52.7395 (1692.17 MB, 1367312 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.104e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.357e-06
Stopped timer 600 at 6.42671 (765.477 MB, 2600 rounds)
Stopped timer 500 at 51.6055 (1171.88 MB, 1527616 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.942e-06
Stopped timer 700 at 18.7081 (81.2324 MB, 641002 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 127.755 seconds 
Time10 = 0.294246 seconds (8.32 MB, 2080 rounds)
Time100 = 2.29273 seconds (80.6728 MB, 47673 rounds)
Time200 = 2.06956 seconds (80.6728 MB, 47673 rounds)
Time300 = 52.7395 seconds (1692.17 MB, 1367312 rounds)
Time500 = 51.6055 seconds (1171.88 MB, 1527616 rounds)
Time600 = 6.42671 seconds (765.477 MB, 2600 rounds)
Time700 = 18.7081 seconds (81.2324 MB, 641002 rounds)
Time1000 = 12.8052 seconds (1492.47 MB, 5048 rounds)
Data sent = 3114.95 MB in ~3633356 rounds (party 0 only; use '-v' for more details)
Global data sent = 9336.53 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 100000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 11018 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 11018 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 11018 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 100000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 3.681e-06
Stopped timer 10 at 0.386802 (10.4 MB, 2600 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.162e-06
Stopped timer 100 at 2.84339 (100.801 MB, 59592 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.752e-06
Stopped timer 200 at 2.6274 (100.801 MB, 59592 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.752e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 2.911e-06
Stopped timer 1000 at 15.7891 (1865.61 MB, 5550 rounds)
Stopped timer 300 at 65.4384 (2115.32 MB, 1708322 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.747e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.541e-06
Stopped timer 600 at 8.04426 (956.805 MB, 2850 rounds)
Stopped timer 500 at 63.9842 (1464.81 MB, 1909120 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.154e-06
Stopped timer 700 at 23.0648 (101.601 MB, 801254 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 158.401 seconds 
Time10 = 0.386802 seconds (10.4 MB, 2600 rounds)
Time100 = 2.84339 seconds (100.801 MB, 59592 rounds)
Time200 = 2.6274 seconds (100.801 MB, 59592 rounds)
Time300 = 65.4384 seconds (2115.32 MB, 1708322 rounds)
Time500 = 63.9842 seconds (1464.81 MB, 1909120 rounds)
Time600 = 8.04426 seconds (956.805 MB, 2850 rounds)
Time700 = 23.0648 seconds (101.601 MB, 801254 rounds)
Time1000 = 15.7891 seconds (1865.61 MB, 5550 rounds)
Data sent = 3893.74 MB in ~4540480 rounds (party 0 only; use '-v' for more details)
Global data sent = 11670.8 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 200000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 15179 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 15179 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 15179 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 200000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 7.572e-06
Stopped timer 10 at 0.782832 (20.8 MB, 5200 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.223e-06
Stopped timer 100 at 5.48341 (201.602 MB, 119177 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.885e-06
Stopped timer 200 at 5.03871 (201.602 MB, 119177 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.597e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 3.123e-06
Stopped timer 1000 at 32.2936 (3731.21 MB, 8058 rounds)
Stopped timer 300 at 131.889 (4230.53 MB, 3413358 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.042e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.197e-06
Stopped timer 600 at 16.4841 (1913.61 MB, 4104 rounds)
Stopped timer 500 at 130.506 (2929.53 MB, 3816642 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.933e-06
Stopped timer 700 at 46.7477 (203.202 MB, 1602508 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 320.555 seconds 
Time10 = 0.782832 seconds (20.8 MB, 5200 rounds)
Time100 = 5.48341 seconds (201.602 MB, 119177 rounds)
Time200 = 5.03871 seconds (201.602 MB, 119177 rounds)
Time300 = 131.889 seconds (4230.53 MB, 3413358 rounds)
Time500 = 130.506 seconds (2929.53 MB, 3816642 rounds)
Time600 = 16.4841 seconds (1913.61 MB, 4104 rounds)
Time700 = 46.7477 seconds (203.202 MB, 1602508 rounds)
Time1000 = 32.2936 seconds (3731.21 MB, 8058 rounds)
Data sent = 7787.27 MB in ~9076062 rounds (party 0 only; use '-v' for more details)
Global data sent = 23341 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 400000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 16246 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 16246 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 16246 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 400000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 7.774e-06
Stopped timer 10 at 1.65738 (41.6 MB, 10400 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.175e-06
Stopped timer 100 at 10.7867 (403.203 MB, 238354 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.897e-06
Stopped timer 200 at 10.0084 (403.203 MB, 238354 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.511e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 3.581e-06
Stopped timer 1000 at 76.3366 (7462.41 MB, 13074 rounds)
Stopped timer 300 at 275.571 (8460.87 MB, 6823428 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.943e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.111e-06
Stopped timer 600 at 38.5137 (3827.21 MB, 6612 rounds)
Stopped timer 500 at 267.184 (5859.22 MB, 7631692 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 1.91e-06
Stopped timer 700 at 92.1821 (406.403 MB, 3205016 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 657.6 seconds 
Time10 = 1.65738 seconds (41.6 MB, 10400 rounds)
Time100 = 10.7867 seconds (403.203 MB, 238354 rounds)
Time200 = 10.0084 seconds (403.203 MB, 238354 rounds)
Time300 = 275.571 seconds (8460.87 MB, 6823428 rounds)
Time500 = 267.184 seconds (5859.22 MB, 7631692 rounds)
Time600 = 38.5137 seconds (3827.21 MB, 6612 rounds)
Time700 = 92.1821 seconds (406.403 MB, 3205016 rounds)
Time1000 = 76.3366 seconds (7462.41 MB, 13074 rounds)
Data sent = 15574.5 MB in ~18147244 rounds (party 0 only; use '-v' for more details)
Global data sent = 46681.9 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 600000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10519 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10519 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10519 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 600000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.827e-06
Stopped timer 10 at 2.51693 (62.4 MB, 15600 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.28e-06
Stopped timer 100 at 16.452 (604.805 MB, 357524 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.67e-06
Stopped timer 200 at 15.6229 (604.805 MB, 357524 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.718e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 3.099e-06
Stopped timer 1000 at 119.217 (11193.6 MB, 18090 rounds)
Stopped timer 300 at 416.393 (12691.3 MB, 10233500 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.806e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.368e-06
Stopped timer 600 at 60.8599 (5740.81 MB, 9120 rounds)
Stopped timer 500 at 403.84 (8788.83 MB, 11446740 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.103e-06
Stopped timer 700 at 139.111 (609.605 MB, 4807524 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 994.245 seconds 
Time10 = 2.51693 seconds (62.4 MB, 15600 rounds)
Time100 = 16.452 seconds (604.805 MB, 357524 rounds)
Time200 = 15.6229 seconds (604.805 MB, 357524 rounds)
Time300 = 416.393 seconds (12691.3 MB, 10233500 rounds)
Time500 = 403.84 seconds (8788.83 MB, 11446740 rounds)
Time600 = 60.8599 seconds (5740.81 MB, 9120 rounds)
Time700 = 139.111 seconds (609.605 MB, 4807524 rounds)
Time1000 = 119.217 seconds (11193.6 MB, 18090 rounds)
Data sent = 23361.7 MB in ~27218412 rounds (party 0 only; use '-v' for more details)
Global data sent = 70022.8 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 800000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 17248 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 17248 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 17248 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 800000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 4.549e-06
Stopped timer 10 at 3.38199 (83.2 MB, 20800 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.345e-06
Stopped timer 100 at 21.8062 (806.406 MB, 476701 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 1.877e-06
Stopped timer 200 at 20.5527 (806.406 MB, 476701 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.993e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 4.333e-06
Stopped timer 1000 at 156.128 (14924.8 MB, 23106 rounds)
Stopped timer 300 at 548.364 (16921.7 MB, 13643572 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 2.097e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.19e-06
Stopped timer 600 at 79.5382 (7654.41 MB, 11628 rounds)
Stopped timer 500 at 536.206 (11718.4 MB, 15261786 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.57e-06
Stopped timer 700 at 185.768 (812.806 MB, 6410032 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 1316.49 seconds 
Time10 = 3.38199 seconds (83.2 MB, 20800 rounds)
Time100 = 21.8062 seconds (806.406 MB, 476701 rounds)
Time200 = 20.5527 seconds (806.406 MB, 476701 rounds)
Time300 = 548.364 seconds (16921.7 MB, 13643572 rounds)
Time500 = 536.206 seconds (11718.4 MB, 15261786 rounds)
Time600 = 79.5382 seconds (7654.41 MB, 11628 rounds)
Time700 = 185.768 seconds (812.806 MB, 6410032 rounds)
Time1000 = 156.128 seconds (14924.8 MB, 23106 rounds)
Data sent = 31148.9 MB in ~36289592 rounds (party 0 only; use '-v' for more details)
Global data sent = 93363.4 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
Measure performance for 1000000 rows
Compiling high-level code...
Executing the program...
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 0 aspirin_count -pn 10562 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 1 aspirin_count -pn 10562 -h localhost
Running /home/mpretz/Thesis/MP-SPDZ/Scripts/../replicated-ring-party.x 2 aspirin_count -pn 10562 -h localhost
Using statistical security parameter 40
Trying to run 64-bit computation
Executing aspirin_count with 1000000 rows
Starting timer 10 at 0 (0 MB, 0 rounds) after 8.07e-06
Stopped timer 10 at 4.26597 (104 MB, 26000 rounds)
Starting timer 100 at 0 (0 MB, 0 rounds) after 1.229e-06
Stopped timer 100 at 28.3077 (1008.01 MB, 595878 rounds)
Starting timer 200 at 0 (0 MB, 0 rounds) after 2.26e-06
Stopped timer 200 at 25.3656 (1008.01 MB, 595878 rounds)
Starting timer 300 at 0 (0 MB, 0 rounds) after 1.842e-06
Starting timer 1000 at 0 (0 MB, 0 rounds) after 3.907e-06
Stopped timer 1000 at 192.772 (18656 MB, 28122 rounds)
Stopped timer 300 at 685.759 (21152.1 MB, 17053644 rounds)
Starting timer 500 at 0 (0 MB, 0 rounds) after 1.869e-06
Starting timer 600 at 0 (0 MB, 0 rounds) after 1.212e-06
Stopped timer 600 at 98.1477 (9568.01 MB, 14136 rounds)
Stopped timer 500 at 664.901 (14648 MB, 19076834 rounds)
Starting timer 700 at 0 (0 MB, 0 rounds) after 2.108e-06
Stopped timer 700 at 228.374 (1016.01 MB, 8012540 rounds)
6
The following benchmarks are including preprocessing (offline phase).
Time = 1637.53 seconds 
Time10 = 4.26597 seconds (104 MB, 26000 rounds)
Time100 = 28.3077 seconds (1008.01 MB, 595878 rounds)
Time200 = 25.3656 seconds (1008.01 MB, 595878 rounds)
Time300 = 685.759 seconds (21152.1 MB, 17053644 rounds)
Time500 = 664.901 seconds (14648 MB, 19076834 rounds)
Time600 = 98.1477 seconds (9568.01 MB, 14136 rounds)
Time700 = 228.374 seconds (1016.01 MB, 8012540 rounds)
Time1000 = 192.772 seconds (18656 MB, 28122 rounds)
Data sent = 38936.1 MB in ~45360774 rounds (party 0 only; use '-v' for more details)
Global data sent = 116704 MB (all parties)
This program might benefit from some protocol options.
Consider adding the following at the beginning of your code:
	program.use_split(3)
Done
